@function gtkalpha($c,$a) {
  @return unquote("alpha(#{$c},#{$a})");
}

$ease-out-quad: cubic-bezier(0.25, 0.46, 0.45, 0.94);
$asset_suffix: if($variant=='dark', '-dark', '');
$style_suffix: if($style == prime, '', '-flat');
$backdrop_transition: 200ms ease-out;
$button_transition: all 200ms $ease-out-quad;

* {
  padding: 0;
  -GtkToolButton-icon-spacing: 4;
  -GtkTextView-error-underline-color: $error_color;

  // The size for scrollbars. The slider is 2px smaller, but we keep it
  // up so that the whole area is sensitive to button presses for the
  // slider. The stepper button is larger in both directions, the slider
  // only in the width

  -GtkScrolledWindow-scrollbar-spacing: 0;

  -GtkToolItemGroup-expander-size: 11;

  -GtkWidget-text-handle-width: $text_handle_width;
  -GtkWidget-text-handle-height: $text_handle_height;

  -GtkDialog-button-spacing: 4;
  -GtkDialog-action-area-border: 0;

  // We use the outline properties to signal the focus properties
  // to the adwaita engine: using real CSS properties is faster,
  // and we don't use any outlines for now.

  outline-color: if($variant == light, gtkalpha(currentColor, 0.3), gtkalpha(currentColor, 0.25));
  outline-style: solid;
  outline-offset: -1px;
  outline-width: 1px;
  -gtk-outline-radius: 0;

  -gtk-secondary-caret-color: $selected_bl_color;
}


/***************
 * Base States *
 ***************/
.background {
  color: $fg_color;
  background-color: $bg_color;
}

/*
   These wildcard seems unavoidable, need to investigate.
   Wildcards are bad and troublesome, use them with care,
   or better, just don't.
   Everytime a wildcard is used a kitten dies, painfully.
*/

*:disabled { -gtk-icon-effect: dim; }

.gtkstyle-fallback {
  color: $fg_color;
  background-color: $bg_color;

  &:hover {
    color: $fg_color;
    background-color: lighten($bg_color, 10%);
  }

  &:active {
    color: $fg_color;
    background-color: darken($bg_color, 10%);
  }

  &:disabled {
    color: $insensitive_fg_color;
    background-color: $insensitive_bg_color;
  }

  &:selected {
    color: $selected_fl_color;
    background-color: $selected_bl_color;
  }
}

.view,
%view {
  color: $text_color;
  background-color: $base_color;

  &:disabled {
    color: $insensitive_fg_color;
    background-color: $insensitive_bg_color;
  }

  &:selected {
    &:focus, & {
      @extend %selected_items;

      border-radius: 3px;
    }
  }
}

.view,
textview {
  text {
    @extend %view;

    selection { &:focus, & { @extend %selected_items; }}
  }
}

textview border { background-color: mix($bg_color, $base_color, 50%); }

iconview { @extend .view; }

.rubberband,
rubberband {
  border: 1px solid darken($selected_bl_color, 10%);
  background-color: transparentize($selected_bl_color, .8);
}

flowbox {
  rubberband { @extend rubberband; }

  flowboxchild {
    padding: 3px;

    &:selected {
      @extend %selected_items_invert;

      outline-offset: -2px;
    }
  }
}

.content-view .tile {
  margin: 2px;
  background-color: if($variant=='light', transparent, black);
  border-radius: 0;
  padding: 0;

  &:active, &:selected { background-color: if($variant=='light', transparent, $selected_bl_color); }
  &:disabled { background-color: if($variant=='light', transparent, $insensitive_bg_color); }
}

label {
  caret-color: currentColor; // this shouldn't be needed.

  &.separator {
    @extend .dim-label;

    color: $fg_color;
  }

  row:selected &,
  &:selected { @extend %nobg_selected_items_light; }

  selection {
    background-color: $selected_bl_color;
    color: $selected_fl_color;
  }

  &:disabled {
    color: $insensitive_fg_color;

    selection { @extend %selected_items:disabled; }
  }
}

.dim-label {
  opacity: 0.55;
  text-shadow: none;
}

assistant {
  .sidebar {
    background-color: $base_color;
    border-top: 1px solid $borders_color;
  }

  &.csd .sidebar { border-top-style: none; }

  .sidebar label { padding: 6px 12px; }

  .sidebar label.highlight { background-color: mix($bg_color, $fg_color, 80%); }
}

%osd,
.osd {
  color: $osd_fg_color;
  background-color: $osd_bg_color;
  background-clip: padding-box;

//  text-shadow: 0 1px black;
//  -gtk-icon-shadow: 0 1px black;
  text-shadow: none;
  -gtk-icon-shadow: none;
}


/*********************
 * Spinner Animation *
 *********************/
@keyframes spin {
  to { -gtk-icon-transform: rotate(1turn); }
}

spinner {
  background: none;
  opacity: 0; // non spinning spinner makes no sense
  -gtk-icon-source: -gtk-icontheme('process-working-symbolic');

  &:checked {
    opacity: 1;
    animation: spin 1s linear infinite;

    &:disabled { opacity: 0.5; }
  }
}


/****************
 * Text Entries *
 ****************/

%entry,
entry {
  %entry_basic, & {
    min-height: $entry_height;
    padding-left: 6px;
    padding-right: 6px;
    border: 1px solid;
    border-radius: $base_radius;
    transition: all 200ms $ease-out-quad;

    @include entry(normal);

    image { // icons inside the entry
      &.left { margin-right: 6px; }
      &.right { margin-left: 6px; }
    }

    &.flat {
      &:focus, &:disabled, & {
        min-height: 0;
        padding: 2px;
        background-color: transparent;
        border-color: transparent;
        border-radius: 0;
      }

      &, &:disabled { box-shadow: none; }
    }

    &:focus { @include entry(focus); }

    &:disabled { @include entry(insensitive); }

    selection { @extend %selected_items; }

    // entry error and warning style
    @each $e_type, $e_color in (error, $error_color),
                               (warning, $warning_color) {
      &.#{$e_type} {
        color: if($variant == 'light', darken($e_color, 15%), lighten($e_color, 10%));
        border-color: entry_focus_border($e_color);

        &:focus { @include entry(focus, $e_color); }

        selection {
          background-color: if($variant == 'light', desaturate(lighten($e_color, 25%), 10%), darken($e_color, 3%));

          @if $variant == dark and $e_type == warning { background-color: darken($e_color, 20%); }
        }
      }
    }

    image { // entry icons colors
      color: mix($fg_color, $base_color, 80%);

      &:hover { color: $fg_color; }

      &:active { color: $selected_bl_color; }
    }

    &:drop(active) {
      &:focus, & {
        border-color: $drop_target_color;
        box-shadow: inset 0 0 0 1px $drop_target_color;
      }
    }

    .osd & {
      @include entry(osd);

      &:focus { @include entry(osd-focus); }

      &:disabled { @include entry(osd-insensitive); }

      @if $variant == light {
        selection {
          background-color: $selected_bg_color;
          color: $selected_fg_color;
        }
      }
    }

    popover.background &:not(.flat) {
      @include entry(normal);
      border-color: if($variant == 'light', _border_color($popover_button_color), darken($menu_color, 7%));
      box-shadow: none;

      &:focus { @include entry(focus); }

      &:disabled { @include entry(insensitive); }
    }

    // lounge: remove shadows from entry inside entry (gnome-builder)
    entry { box-shadow: none; }
  }

  progress {
    margin: 2px -4px;
    background-color: transparent;
    background-image: none;
    border-radius: 0;
    border-width: 0 0 2px;
    border-color: if($scale_style == casual,
                  if($variant == 'light', lighten($selected_bg_color, 20%), $selected_bg_color),
                  $scale_highlight_color);
    border-style: solid;
    box-shadow: none;
  }

   // linked entries
  .linked:not(.vertical) > & + button,
  .linked:not(.vertical) > & + button + button,
  .linked:not(.vertical) > & + combobox > box > button.combo { min-height: 16px; }

  .linked:not(.vertical) > & { @extend %linked; }
  .linked:not(.vertical) > &:focus + &,
  .linked:not(.vertical) > &:focus + button,
  .linked:not(.vertical) > &:focus + combobox > box > button.combo { border-left-color: entry_focus_border(); }

  .linked:not(.vertical) > &:focus.error + &,
  .linked:not(.vertical) > &:focus.error + button,
  .linked:not(.vertical) > &:focus.error + combobox > box > button.combo { border-left-color: entry_focus_border($error_color); }

  .linked:not(.vertical) > &:drop(active) + &,
  .linked:not(.vertical) > &:drop(active) + button,
  .linked:not(.vertical) > &:drop(active) + combobox > box > button.combo { border-left-color: $drop_target_color; }

  // Vertically linked entries
  // FIXME: take care of "colored" entries
  .linked.vertical > & {
    @extend %linked_vertical;

    // brighter border between linked entries
    &:not(:disabled) + entry:not(:disabled),
    &:not(:disabled) + %entry:not(:disabled) {
      border-top-color: mix($borders_color, $base_color, 30%);
    }

    // brighter border between linked insensitive entries
    &:disabled + %entry:disabled,
    &:disabled + entry:disabled { border-top-color: mix($borders_color, $base_color, 30%); }

    // color back the top border of a linked focused entry following another entry.
    // :not(:only-child) is a specificity bump hack.
    + %entry:focus:not(:only-child),
    + entry:focus:not(:only-child) { border-top-color: entry_focus_border(); }

    + %entry:focus.error:not(:only-child),
    + entry:focus.error:not(:only-child) { border-top-color: entry_focus_border($error_color); }

    + %entry:drop(active):not(:only-child),
    + entry:drop(active):not(:only-child) { border-top-color: $drop_target_color; }

    // this takes care of coloring the top border of the focused entry subsequent widget.
    // :not(:only-child) is a specificity bump hack.
    &:focus:not(:only-child) {
      + %entry,
      + entry,
      + button,
      + combobox > box > button.combo { border-top-color: entry_focus_border(); }
    }

    &:focus.error:not(:only-child) {
      + %entry,
      + entry,
      + button,
      + combobox > box > button.combo { border-top-color: entry_focus_border($error_color); }
    }

    &:drop(active):not(:only-child) {
      + %entry,
      + entry,
      + button,
      + combobox > box > button.combo { border-top-color: $drop_target_color; }
    }
  }
}

treeview entry {
  &:focus {
    &:dir(rtl), &:dir(ltr) { // specificity bump hack
      background-color: $base_color;
      transition-property: color, background;
    }
  }

  &.flat, & {
    border-radius: 0;
    background-image: none;
    background-color: $base_color;

    &:focus { border-color: $selected_bl_color; }
  }
}

.entry-tag {
  // sizing
  padding: 5px;

  margin-top: 2px;
  margin-bottom: 2px;

  // side margins: compensate the entry padding with a negative margin
  // then the negative margin itself
  :dir(ltr) & {
    margin-left: 6px;
    margin-right: -3px;
  }
  :dir(rtl) & {
    margin-left: -3px;
    margin-right: 6px;
  }

  border-style: none;

  $_entry_tag_color: if($variant=='light', $selected_fl_color, $base_color);
  color: $_entry_tag_color;

  $_entry_tag_bg: if($variant=='light', $selected_bl_color, mix($fg_color, $base_color, 50%));
  background-color: $_entry_tag_bg;

  &:hover {
    background-color: if($variant=='light', darken($_entry_tag_bg, 5%), lighten($_entry_tag_bg, 5%));
  }

  &.button {
    background-color: transparent;
    color: transparentize($_entry_tag_color, 0.3);
  }

  &.button {
    &:hover {
      color: $_entry_tag_color;
    }
    &:active {
      color: transparentize($_entry_tag_color, 0.3);
    }
  }
}

/***********
 * Buttons *
 ***********/
// stuff for .needs-attention
$_dot_color: if($variant=='light', $selected_bg_color,
                                   lighten($selected_bg_color, 15%));
@keyframes needs_attention {
  from {
    background-image: -gtk-gradient(radial,
                                    center center, 0,
                                    center center, 0.01,
                                    to($_dot_color),
                                    to(transparent));
  }

  to {
    background-image: -gtk-gradient(radial,
                                    center center, 0,
                                    center center, 0.5,
                                    to($selected_bl_color),
                                    to(transparent));
  }
}

%button,
button {
  @at-root %button_basic, & {

    min-height: $button_height;
    min-width: $button_width;
    padding: $button_horz_padding $button_vert_padding;
    border: 1px solid;
    border-radius: $base_radius;
    transition: $button_transition;
    -gtk-outline-radius: $base_radius;

    @include button(normal);

    &.flat {
      @include button(undecorated);
      // to avoid adiacent buttons borders clashing when transitioning, the transition on the normal state is set
      // to none, while it's added back in the hover state, so the button decoration will fade in on hover, but
      // it won't fade out when the pointer leave the button allocation area. To make the transition more evident
      // in this case the duration is increased.
      transition: none;

      &:hover {
        transition: $button_transition;
        transition-duration: 500ms;

        &:active { transition: $button_transition; }
      }
    }

    &:hover {
      @include button(hover);
      -gtk-icon-effect: highlight;
    }

    &:active,
    &:checked {
      @include button(active);

      transition-duration: 50ms;
    }

    &.flat { &:disabled { @include button(undecorated); }}

    &:disabled {
      @include button(insensitive);

      &:active,
      &:checked { @include button(insensitive-active); }
    }

    &.image-button {
      min-width: $button_height;
      padding-left: $button_horz_padding;
      padding-right: $button_horz_padding;
    }

    &.text-button {
      padding-left: $text_button_side_padding;
      padding-right: $text_button_side_padding;
      padding-top: 4px;
      padding-bottom: 4px;
    }

    &.text-button.image-button {
      padding-left: 4px;
      padding-right: 4px;

      label {
        padding-left: 8px;
        padding-right: 8px;
      }
    }

    &:drop(active) {
      color: $drop_target_color;
      border-color: $drop_target_color;
      box-shadow: inset 0 0 0 1px $drop_target_color;
    }
  }

  @at-root %button_selected, & {
    row:selected & {
      @if $variant == 'light' { &:not(.sidebar-button) { border-color: mix($selected_borders_color, $borders_color, 40%); }}

      &.flat:not(:active):not(:checked):not(:hover):not(disabled) {
        color: $selected_fl_color;
        border-color: transparent;
      }
    }
  }


  // big standalone buttons like in Documents pager
  &.osd {
    min-width: 24px;
    min-height: 32px;
    padding: 4px 8px;

    &.image-button {
      min-width: 32px;
      padding: 4px;
    }

    color: $osd_fg_color;
    border-radius: 3px;

    @include button(osd);

    border: none;

    margin-right: 1px;
    margin-bottom: 1px;
    box-shadow: 1px 1px transparentize(black, .7);
    outline-offset: -1px;

    &:hover {
      @include button(osd-hover);

      border: none;
      box-shadow: 1px 1px transparentize(black, .7);
    }

    &:active,
    &:checked {
      @include button(osd-active);

      border: none;
      box-shadow: none;
    }

    &:disabled {
      @include button(osd-insensitive);

      border: none;
    }

    .linked.horizontal & {
      margin-right: 0;
      box-shadow: 0 1px transparentize(black, .7);

      &:first-child {
        margin-right: 0;
        box-shadow: 0 1px transparentize(black, .7);
      }

      &:last-child {
        margin-right: 1px;
        box-shadow: 0 1px transparentize(black, .7), 1px 0 transparentize(black, .7);
      }

      &:only-child {
        margin-right: 1px;
        box-shadow: 1px 1px transparentize(black, .7);
      }

      &:active,
      &:checked,
      &:disabled { box-shadow: none; }
    }

    .linked.vertical & {
      margin-bottom: 0;
      box-shadow: 1px 0 transparentize(black, .7);

      &:first-child {
        margin-bottom: 0;
        box-shadow: 1px 0 transparentize(black, .7);
      }

      &:last-child {
        margin-bottom: 1px;
        box-shadow: 0 1px transparentize(black, .7), 1px 0 transparentize(black, .7);
      }

      &:only-child {
        margin-bottom: 1px;
        box-shadow: 1px 1px transparentize(black, .7);
      }

      &:active,
      &:checked,
      &:disabled { box-shadow: none; }
    }
  }

  //overlay / OSD style
  @at-root %osd_button,
  .osd & {
    @include button(osd);

    &:hover { @include button(osd-hover); }

    &:active,
    &:checked { @include button(osd-active); }

    &:disabled { @include button(osd-insensitive); }

    outline-offset: -2px;

    &.flat {
      @include button(undecorated);

      box-shadow: none; //FIXME respect no edge on the button mixin
      text-shadow: none;
      -gtk-icon-shadow: none;
//      text-shadow: 0 1px black;
//      -gtk-icon-shadow: 0 1px black;

      &:hover { @include button(osd-hover); }

      &:disabled {
        @include button(osd-insensitive);
        background-image: none;
        border-color: transparent;
        box-shadow: none;
      }

      &:active,
      &:checked { @include button(osd-active); }
    }
  }

  popover & {

    @include button(normal, $popover_button_color, $selected_fl_color);
    box-shadow: none;

    @if $variant == 'dark' { border-color: darken($menu_color, 7%); }

    &:hover {
      @include button(hover, $popover_button_color, $selected_fl_color);
      box-shadow: none;
      @if $variant == 'dark' { border-color: darken($menu_color, 7%); }
    }

    &:active,
    &:checked {
      @include button(active, $popover_button_color, $selected_fl_color);
      box-shadow: none;
      @if $variant == 'dark' { border-color: darken($menu_color, 7%); }
    }

    &:disabled {
      @include button(insensitive, $popover_button_color, $selected_fl_color);
      background-image: image($popover_bg_color);
      @if $variant == 'dark' { border-color: darken($menu_color, 7%); }
    }
  }

  // Suggested and Destructive Action buttons
  @each $b_type, $b_color in (suggested-action, $selected_bg_color),
                             (destructive-action, $error_color),
                             (selection-menu, $selected_bg_color) {
    &.#{$b_type} {
      @include button(normal, $b_color, $selected_fg_color);

      &.flat {
        @include button(undecorated);

        color: $b_color; //FIXME: does it work on the dark variant?
      }

      popover & { box-shadow: none; }

      &:hover { 
        @include button(hover, $b_color, $selected_fg_color);

        popover & { box-shadow: none; }
      }

      &:active,
      &:checked {
        @include button(active, if($variant == 'light', lighten($b_color, 4%), $b_color), $selected_fg_color);

        @if $variant == 'light' { text-shadow: 0 1px transparentize(black, .7); }

        popover & { box-shadow: none; }
      }

      &.flat {
        &:disabled {
          @include button(undecorated);

          color: transparentize($b_color, 0.2);
        }
      }

      &:disabled {
        @include button(insensitive);

        &:active,
        &:checked { @include button(insensitive-active, $b_color, $insensitive_fg_color); }
      }

      .osd & {
        @include button(osd, $b_color);

        &:hover { @include button(osd-hover, $b_color); }

        &:active,
        &:checked { @include button(osd-active, $b_color); }

        &:disabled { @include button(osd-insensitive, $b_color); }
      }

      headerbar &:backdrop {
        color: if($variant == light, mix($b_color, $selected_fg_color, 25%),mix($b_color, $selected_fg_color, 30%));
      }
    }
  }

  .stack-switcher > & {
    // to position the needs attention dot, padding is added to the button
    // child, a label needs just lateral padding while an icon needs vertical
    // padding added too.

    // needs to be set or it gets overriden by GtkRadioButton outline-offset
    outline-offset: if($variant == light, -1px, -2px);

    > label {
      padding-left: 6px;  // label padding
      padding-right: 6px; //
    }

    > image {
      padding-left: 6px;   // image padding
      padding-right: 6px;  //
      padding-top: 3px;    //
      padding-bottom: 3px; //
    }

    &.text-button {
      // compensate text-button paddings
      padding-left: 10px;
      padding-right: 10px;
    }

    &.image-button {
      // we want image buttons to have a 1:1 aspect ratio, so compensation
      // of the padding added to the GtkImage is needed
      padding-left: 2px;
      padding-right: 2px;
    }

    &.needs-attention {
      > label,
      > image { @extend %needs_attention; }

      &:active,
      &:checked {
        > label,
        > image {
          animation: none;
          background-image: none;
        }
      }
    }
  }

  // hide separators
  &.font,
  &.file { separator { background-color: transparent; }}

  &.font { > box > box > label { font-weight: bold; }}

  // inline-toolbar buttons
  .inline-toolbar & {
    border-radius: $base_radius;
    border-width: 1px;
    @extend %linked;
  }

  .primary-toolbar & { -gtk-icon-shadow: none; } // tango icons don't need shadows

  .linked > &,
  .linked > &:hover,
  .linked > &:active,
  .linked > &:checked { @extend %linked; }

  .linked.vertical > &,
  .linked.vertical > &:hover,
  .linked.vertical > &:active,
  .linked.vertical > &:checked { @extend %linked_vertical; }

  &.circular { // The Bloody Circul Button
    border-radius: 9999px;
    -gtk-outline-radius: 9999px;

    label { padding: 0; }

    // the followind code is needed since we use a darker bottom border on buttons, which looks pretty
    // bad with a 100% border radius (see https://bugzilla.gnome.org/show_bug.cgi?id=771205 for details),
    // so on relevant states we an additional background-image with a gradient clipped on the border-box,
    // so setting a transparent border would reveal it.
    // FIXME: take care of colored circular button.
    $_border_bg: linear-gradient(to top, $alt-borders-color 25%, $borders-color 50%);

    &:not(.flat):not(:checked):not(:active):not(:disabled) {
      @include button(normal);
      background-image: $button_fill, $_border_bg;
      border-color: transparent;
    }

    &:hover:not(:checked):not(:active):not(:disabled) {
      @include button(hover);
      background-image: $button_fill, $_border_bg;
      border-color: transparent;
    }

    background-origin: padding-box, border-box;
    background-clip: padding-box, border-box;
  }
}

%needs_attention {
  animation: needs_attention 150ms ease-in;
  $_dot_shadow: _text_shadow_color();
  $_dot_shadow_r: if($variant=='light',0.5,0.45);
  background-image: -gtk-gradient(radial,
                                  center center, 0,
                                  center center, 0.5,
                                  to($_dot_color),
                                  to(transparent)),
                    -gtk-gradient(radial,
                                  center center, 0,
                                  center center, $_dot_shadow_r,
                                  to($_dot_shadow),
                                  to(transparent));
  background-size: 6px 6px, 6px 6px;
  background-repeat: no-repeat;

  @if $variant == 'light' { background-position: right 3px, right 4px; }

  @else { background-position: right 3px, right 2px; }

  &:dir(rtl) {
    @if $variant == 'light' { background-position: left 3px, left 4px; }

    @else { background-position: left 3px, left 2px; }
  }
}


// all the following is for the +|- buttons on inline toolbars, that way
// should really be deprecated...
.inline-toolbar toolbutton > button { // redefining the button look is
                                      // needed since those are flat...
  @include button(normal);

  &:hover { @include button(hover); }

  &:active,
  &:checked{ @include button(active); }

  &:disabled {
    @include button(insensitive);

    &:active,
    &:checked { @include button(insensitive-active); }
  }
}

// More inline toolbar buttons
toolbar.inline-toolbar toolbutton {
  > button.flat { @extend %linked_middle; }

  &:first-child > button.flat { @extend %linked_left; }

  &:last-child > button.flat { @extend %linked_right; }

  &:only-child > button.flat { @extend %linked_only_child; }
}

%linked_middle {
  &:not(.osd) {
    margin-right: -1px;
  }

  border-radius: 0;
  -gtk-outline-radius: 0;

  popover &, &:not(entry) {
    &, &:disabled { border-left-color: transparent; }

    &.suggested-action:focus { border-left-color: _border_color($selected_bg_color); }

    &.destructive-action:focus { border-left-color: _border_color($error_color); }
  }
}

%linked_left {
  border-radius: $base_radius 0 0 $base_radius;
  -gtk-outline-radius: $base_radius 0 0 $base_radius;

  &:not(entry) {
    border-left-color: $borders_color;

    .osd & { border-left-color: $osd_borders_color; }

    &:drop(active) { border-left-color: $drop_target_color; }
  }

  &:not(button) { &:not(:focus) { border-left-color: $borders_color; }}

  &.suggested-action:not(:disabled) {
    border-left-color: _border_color($selected_bg_color);
  }

  &.destructive-action:not(:disabled) {
    border-left-color: _border_color($error_color);
  }
}

%linked_right {
  margin-right: 0;
  border-radius: 0 $base_radius $base_radius 0;
  -gtk-outline-radius: 0 $base_radius $base_radius 0;

  &:not(entry) {
    border-right-color: $borders_color;

    .osd & { border-right-color: $osd_borders_color; }

    &:drop(active) { border-right-color: $drop_target_color; }
  }

  &:not(button) { &:not(:focus) { border-right-color: $borders_color; }}

  &.suggested-action:not(:disabled) {
    border-right-color: _border_color($selected_bg_color);

    &:focus { border-left-color: _border_color($selected_bg_color); }
  }

  &.destructive-action:not(:disabled) {
    border-right-color: _border_color($error_color);

    &:focus { border-left-color: _border_color($error_color); }
  }
}

%linked_only_child {
    border-radius: $base_radius;
    -gtk-outline-radius: $base_radius;
}

// .linked assumes Box, which reverses nodes in RTL, so 1st child is always left
%linked {
  @extend %linked_middle;

  &:first-child { @extend %linked_left; }
  &:last-child { @extend %linked_right; }

  &:only-child { @extend %linked_only_child; }
}

%linked_flippable_middle {

  margin-right: -1px;
  border-radius: 0;
  -gtk-outline-radius: 0;

  border-right-color: transparent;
  border-left-color: $borders_color;

  &:dir(rtl) {
    border-right-color: $borders_color;
    border-left-color: transparent;
  }
}

%linked_flippable_left {
  border-radius: $base_radius 0 0 $base_radius;
  -gtk-outline-radius: $base_radius 0 0 $base_radius;

  &:dir(rtl) {
    border-left-color: $borders_color;
    border-right-color: transparentize(black, .75);
  }
}

%linked_flippable_right {
  border-radius: 0 $base_radius $base_radius 0;
  -gtk-outline-radius: 0 $base_radius $base_radius 0;

  border-right-color: $borders_color;
  border-left-color: transparentize(black, .75);

  &:dir(rtl) {
    border-right-color: $borders_color;
    border-left-color: transparent;
  }
}


// Other widgets let CSS give the order, so 1st/last child are at text start/end
%linked_flippable {
  @extend %linked_flippable_middle;

  &:dir(ltr) {
    &:first-child { @extend %linked_flippable_left; }
    &:last-child { @extend %linked_flippable_right; }
  }

  &:dir(rtl) {
    &:first-child { @extend %linked_flippable_right; }
    &:last-child { @extend %linked_flippable_left; }
  }

  &:only-child {
    border-radius: $base_radius;
    -gtk-outline-radius: $base_radius;
  }
}

%linked_vertical_middle {
  &:not(.osd) {
    margin-top: -1px;
  }

  // lounge: need to overwrite right margin, otherwise it is inherited from regular %linked
  margin-right: 0;
  border-radius: 0;
  -gtk-outline-radius: 0;

  popover &, &:not(entry) { // lounge: not(entry) doesnt work here, in entry:not(entry) things
    &, &:disabled {
      border-left-color: $borders_color;
    }
    &:not(button):focus {
      border-left-color: entry_focus_border();
    }
    &.suggested-action {
      border-left-color: _border_color($selected_bg_color);
    }
    &.destructive-action {
      border-left-color: _border_color($error_color);
    }
  }

  &:not(entry):not(:first-child) { // lounge: not(entry) doesnt work here, in entry:not(entry) things
    &, &:disabled {
      border-top-color: transparent;
    }
    // lounge: it looks like an entry overrides bottom border of a button, if the entry is placed under the button
    // probably border-color for the entry is not transparent, but comes from background-color;
    // downside of this workaround is incorrect outline for vertical-linked-button-above-entry 
    // LOUNGE-FIXME: changing border background from bg-color to bg-image may help.
    &:not(button), &:not(button):disabled {
      border-top-color: $borders_color;
    }
    &:not(button):focus {
      border-top-color: entry_focus_border();
    }
  }
}


%linked_vertical_top {
    margin-top: 0;
    margin-right: 0;
    border-top-left-radius: $base_radius;
    border-top-right-radius: $base_radius;
    -gtk-outline-radius: $base_radius $base_radius 0 0;
}

%linked_vertical_bottom {
    border-bottom-left-radius: $base_radius;
    border-bottom-right-radius: $base_radius;
    -gtk-outline-radius: 0 0 $base_radius $base_radius;
}

%linked_vertical_only_child {
    border-radius: $base_radius;
    -gtk-outline-radius: $base_radius;
}

%linked_vertical{
  @extend %linked_vertical_middle;

  &:first-child { @extend %linked_vertical_top; }
  &:last-child { @extend %linked_vertical_bottom; }

  &:only-child { @extend %linked_vertical_only_child; }
}

%undecorated_button {
  background-color: transparent;
  background-image: none;
  border-color: transparent;
  box-shadow: inset 0 1px transparentize(white, 1),
              0 1px transparentize(white, 1);
  text-shadow: none;
  -gtk-icon-shadow: none;
}

/* menu buttons */
modelbutton.flat,
.menuitem.button.flat {
  min-height: $menuitem_height;
  padding: $popover_menuitem_padding;
  border-radius: $base_radius;
  outline-offset: -1px;
  border: 1px solid transparent;
  -gtk-outline-radius: $base_radius;

  @extend %undecorated_button;

  &:hover { @extend %menuitem_hover; }

  &:selected { @extend %selected_items; }
}

%menuitem_hover {
  color: $selected_fl_color;
  background-color: $selected_bl_color;
  border-radius: 3px;

  @if $style == prime {
    border-color: darken($selected_bl_color, 10%);

    @if $variant == light {
      
    box-shadow: inset 0 -1px transparentize(black, .95), inset 0 1px transparentize(white, .75);
// lounge: doesnt work as intended (shadow becomes brighter on active menuitem with child menu)
//    text-shadow: 0px 1px transparentize(white, .85);
    }
    @else {
      box-shadow: inset 0 -1px transparentize(black, .9), inset 0 1px transparentize(white, .92);
//      text-shadow: 0px 1px transparentize(black, .85);
    }
  }

  @if $style == flat {
    border-color: $selected_bl_color;
  }
}


modelbutton.flat arrow {
  background: none;

  &:hover { background: none; }

  &.left { -gtk-icon-source: -gtk-icontheme("pan-start-symbolic"); }

  &.right { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); }
}

button.color {
  padding: 4px;

  colorswatch:only-child {
    &, overlay { border-radius: 0; }

    @if $variant == 'light' {
      box-shadow: 0 1px _text_shadow_color();

      .osd & { box-shadow: none; }
    }
  }

  @if $variant == 'light' {
    .osd &, & {
      &:disabled,
      &:active,
      &:checked { colorswatch:only-child { box-shadow: none; }}
    }
  }
}

// list row buttons
list {
  row {
    &,
    &:selected,
    &:selected:hover {
      button.image-button:not(.flat):not(.sidebar-button) {
        @extend %undecorated_button;

        &:hover { @include button(hover); }
        &:active,
        &:checked { @include button(active); }
      }
    }
    & button.image-button:not(.flat):not(.sidebar-button) { border: 1px solid if($variant=='light', transparentize($borders_color, .3), $borders_color); }
    
    &:selected,
    &:selected:hover {
      button.image-button:not(.flat):not(.sidebar-button) { border: 1px solid $alt_borders_color; }
    }
  }
}

/*********
 * Links *
 *********/

%link,
*:link {
  color: $link_color;

  &:visited {
    color: $link_visited_color;

    *:selected & { color: mix($selected_fl_color, $selected_bg_color, 70%); }
  }

  &:hover {
    color: lighten($link_color,10%);

    *:selected & { color: mix($selected_fl_color, $selected_bg_color, 90%); }
  }

  &:active {
    color: $link_color;

    *:selected & { color: mix($selected_fl_color, $selected_bg_color, 80%); }
  }

  &:disabled { color: transparentize(desaturate($link_color, 100%), 0.2); }

  @at-root %link_selected,
  &:selected,
  *:selected & { color: mix($selected_fl_color, $selected_bg_color, 80%); }
}

button:link,
button:visited {
  @extend %undecorated_button;

  @extend *:link;

  text-shadow: none;

  &:hover,
  &:active,
  &:checked {
    @extend %undecorated_button;

    text-shadow: none;
  }

  > label {
    @extend %link;

    text-decoration-line: underline;
  }
}


/*****************
 * GtkSpinButton *
 *****************/
spinbutton {
  &:not(.vertical) {
    // in this horizontal configuration, the whole spinbutton
    // behaves as the entry, so we extend the entry styling
    // and nuke the style on the internal entry
    @extend %entry;

    padding: 0;

    %spinbutton_horz_entry {
      min-width: $spinbutton_entry_width;
      // reset all the other props since the spinbutton node is styled here
      margin: 0;
      background: none;
      background-color: transparent;
      border: none;
      border-radius: 0;
      box-shadow: none;
    }


    entry {
      @extend %spinbutton_horz_entry;
    }

    button {
      min-height: $spinbutton_size;
      min-width: $spinbutton_size;
      margin: 0;
      padding: 0px 2px;
      color: mix($fg_color, $base_color, 90%);
      background-image: none;
      border-style: none none none solid;
      border-color: transparentize($borders_color, 0.7);
      border-radius: 0;
      box-shadow: none;

      &:dir(rtl) { border-style: none solid none none; }

      &:hover {
        color: $fg_color;
        background-color: transparentize($fg_color, 0.95);
      }

      &:disabled {
        color: transparentize($insensitive_fg_color, 0.7);
        background-color: transparent;
      }

      &:active {
        background-color: transparentize(black, 0.9);
        box-shadow: inset 0 2px 3px -1px transparentize(black, 0.8);
      }

      &:dir(ltr):last-child { border-radius: 0 3px 3px 0; }

      &:dir(rtl):first-child { border-radius: 3px 0 0 3px; }
    }
  }

  // OSD horizontal
  .osd &:not(.vertical) {
    entry {
      @extend %spinbutton_horz_entry;
    }

    button {
      @include button(undecorated);

      color: $osd_fg_color;
      border-style: none none none solid;
      border-color: transparentize($osd_borders_color, 0.3);
      border-radius: 0;
      box-shadow: none;
      -gtk-icon-shadow: none;

      &:dir(rtl) { border-style: none solid none none; }

      &:hover {
        @include button(undecorated);

        color: $osd_fg_color;
        border-color: transparentize(opacify($osd_borders_color, 1), 0.5);
        background-color: transparentize($osd_fg_color, 0.9);
        -gtk-icon-shadow: none;
        box-shadow: none;
      }

      &:disabled {
        @include button(undecorated);

        color: $osd_insensitive_fg_color;
        border-color: transparentize(opacify($osd_borders_color, 1), 0.5);
        -gtk-icon-shadow: none;
        box-shadow: none;
      }

      &:dir(ltr):last-child { border-radius: 0 $base_radius $base_radius 0; }

      &:dir(rtl):first-child { border-radius: $base_radius 0 0 $base_radius; }
    }
  }

  // Vertical
  &.vertical {
    // in the vertical configuration, we treat the spinbutton
    // as a box, and tweak the style of the entry in the middle
    // so that it's linked

    // FIXME: this should not be set at all, but otherwise it gets the wrong
    // color
    &:disabled { color: $insensitive_fg_color; }

    &:drop(active) {
      border-color: transparent;
      box-shadow: none;
    }

    entry {
      min-height: $entry_height;
      min-width: $entry_height;
      padding: 0;
      border-radius: 0;
    }

    button {
      min-height: $spinbutton_size;
      min-width: $spinbutton_size;
      padding: 2px;

      &.up { @extend %top_button; }

      &.down { @extend %bottom_button; }
    }

    %top_button {
      border-radius: $base_radius $base_radius 0 0;
      border-style: solid solid none solid;
    }

    %bottom_button {
      border-radius: 0 0 $base_radius $base_radius;
      border-style: none solid solid solid;
    }
  }

  // OSD vertical
  .osd &.vertical button:first-child {
    @include button(osd);

    &:hover { @include button(osd-hover);}

    &:active { @include button(osd-active); }

    &:disabled { @include button(osd-insensitive); }
  }

  // Misc
  treeview &:not(.vertical) {
    min-height: 0;
    border-style: none;
    border-radius: 0;

    entry {
      min-height: 0;
      padding: 1px 2px;
    }
  }
}


/**************
 * ComboBoxes *
 **************/
combobox {
  // lounge workaround, with regular 'min-height' arrow button is deformed (compact theme)
  button {
    min-height: $combobox_button_height;
    padding: $combobox_button_padding;
  }
  arrow {
    -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
    min-height: 16px;
    min-width: 16px;
  }

  &.linked {
    button:nth-child(2) {
      &:dir(ltr) { @extend %linked_right; }
      &:dir(rtl) { @extend %linked_left; }
    }
  }

  &:drop(active) { // FIXME: untested
    box-shadow: none;

    button.combo { @extend %button_basic:drop(active); }
  }
}

.linked > combobox > box > button.combo {
  // the combo is a composite widget so the way we do button linking doesn't
  // work, special case needed. See
  // https://bugzilla.gnome.org/show_bug.cgi?id=733979

  &:dir(ltr),
  &:dir(rtl) { @extend %linked_middle; } // specificity bump
}

.linked:not(.vertical) > combobox:first-child > box > button.combo { @extend %linked_vertical_top; }
.linked:not(.vertical) > combobox:last-child > box > button.combo { @extend %linked_vertical_bottom; }
.linked:not(.vertical) > combobox:only-child > box > button.combo { @extend %linked_vertical_only_child; }

.linked.vertical > combobox > box > button.combo { @extend %linked_vertical_middle; }
.linked.vertical > combobox:first-child > box > button.combo { @extend %linked_vertical:first-child;}
.linked.vertical > combobox:last-child > box > button.combo { @extend %linked_vertical:last-child; }
.linked.vertical > combobox:only-child > box > button.combo { @extend %linked_vertical:only-child; }


/************
 * Toolbars *
 ************/
%toolbar {
  -GtkWidget-window-dragging: true;
  padding: 4px;
  background-color: $bg_color;
}

toolbar {
  @extend %toolbar;

  padding: 4px 3px 3px 4px;

  // on OSD
  .osd & { background-color: transparent; }

  // stand-alone OSD toolbars
  &.osd {
    padding: $toolbar_osd_padding;
    border: none;
    border-radius: $osd_toolbar_radius;
    background-color: $osd_bg_color;

    &.left,
    &.right,
    &.top,
    &.bottom { border-radius: 0; } // positional classes for `attached` osd toolbars
  }

  // toolbar separators
  &.horizontal separator { margin: 0 7px 1px 6px; }
  &.vertical separator { margin: 6px 1px 7px 0; }

  &:not(.inline-toolbar):not(.osd) {
    // workaround: add margins to the children of tool items to simulate
    // spacing, ignore the overflow button (.toggle) and the overflow menu
    // (.popup)
    > *:not(.toggle):not(.popup) > * {
      margin-right: 1px;
      margin-bottom: 1px;
    }
  }
}

//searchbar, location-bar & inline-toolbar
.inline-toolbar {
  @extend %toolbar;

  @extend %darkbar;

  padding: 3px;
  border-width: 0 1px 1px;
  border-radius: 0  0 3px 3px;
}

searchbar > revealer > box,
.location-bar {
  @extend %toolbar;

  @extend %darkbar;

  border-width: 0 0 1px;
  padding: $searchbar_revealer_location_bar_padding;
}

searchbar > revealer > box {
  // workaround: undo the GtkContainer:border-width and use CSS padding instead
  margin: -6px;
  padding: $searchbar_revealer_padding;

  button.flat { padding: 2px 4px; }
}

%darkbar {
  border-style: solid;
  border-color: $borders_color;
  $_bg: mix($bg_color, $borders_color, 80%);
  background-color: $_bg;
}


/***************
 * Header bars *
 ***************/
%titlebar,
headerbar {
  padding: 0 $headerbar_padding;
  min-height: $headerbar_height;
  border-width: 0 0 1px;
  border-style: solid;
  border-color: $borders_color;
  border-radius: 0;

  @include headerbar_fill;

  &:backdrop {
    color: $backdrop_fg_color;
    background-image: image(darken($headerbar_color, 2%));

    @if $style == prime {
      box-shadow: inset 0 1px $top_hilight;
    }

    transition: $backdrop_transition;
  }

  .title {
    padding-left: 12px;
    padding-right: 12px;
    font-weight: bold;
    &:backdrop { color: $backdrop_fg_color; }
  }

  .subtitle {
    font-size: smaller;
    padding-left: 12px;
    padding-right: 12px;

    @extend .dim-label;
  }

  button:not(.suggested-action):not(.destructive-action):not(.selection-menu) {
    &:backdrop {
      color: $backdrop_fg_color;
      -gtk-icon-shadow: none;

      &:disabled {
        color: mix($insensitive_fg_color, $base_color, 60%);
        -gtk-icon-shadow: none;
      }
    }
  }

  .selection-mode &,
  &.selection-mode {
    .selection-menu {
      &:backdrop, & {
        padding: if($size == regular, 6px 10px 2px 10px, 5px 10px 3px 10px);

        arrow { -GtkArrow-arrow-scaling: 1; }

        .arrow {
          -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
          color: transparentize($selected_fg_color,0.5);
          -gtk-icon-shadow: none;
        }
      }
    }
  }

  // squared corners when the window is maximized, tiled, or fullscreen
  .tiled &,
  .tiled-top &,
  .tiled-right &,
  .tiled-bottom &,
  .tiled-left &,
  .maximized &,
  .fullscreen & {
    &:backdrop, & {
      border-radius: 0;
    }
  }

  &.default-decoration {
    min-height: $titlebar_height;
    padding: $titlebar_padding;

    button.titlebutton {
      min-height: $titlebar_titlebutton_size;
      min-width: $titlebar_titlebutton_size;
      margin: 0;
      padding: 0;
    }
  }

  .solid-csd & {
    &:backdrop, & {
      &:dir(rtl), &:dir(ltr) { // specificity bump
        margin-left: -1px;
        margin-right: -1px;
        margin-top: -1px;
        border-radius: 0;
        box-shadow: none;
      }
    }
  }
  separator.titlebutton {
    background: transparent;
    min-width: 0;
  }
}

headerbar {
  // add vertical margins to common widget on the headerbar to avoid them spanning the whole height
  entry,
  spinbutton,
  separator:not(.sidebar),
  button {
    margin-top: $headerbar_padding;
    margin-bottom: $headerbar_padding;
  }
  switch {
    margin-top: $headerbar_switch_padding;
    margin-bottom: $headerbar_switch_padding;
  }

  &.titlebar headerbar:not(.titlebar) {
    // Drop the background of non-titlebar nested headerbars. This is needed to
    // work around headerbar sliding animation issues without refactoring
    // Adwaita's support of titlebars and headerbars as it may break
    // applications.
    // See https://gitlab.gnome.org/GNOME/gtk/issues/1264 for more information.
    background: none;
    box-shadow: none;
  }
}

.background .titlebar {
  &:backdrop, & {
    border-top-left-radius: $window_top_radius;
    border-top-right-radius: $window_top_radius;
  }
}

.background.tiled .titlebar,
.background.tiled-top .titlebar,
.background.tiled-right .titlebar,
.background.tiled-bottom .titlebar,
.background.tiled-left .titlebar,
.background.maximized .titlebar,
.background.solid-csd .titlebar {
  &:backdrop, & {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
  }
}

headerbar { // headerbar border rounding

  window separator:first-child + &,
  window &:first-child { &:backdrop, & { border-top-left-radius: $window_top_radius; }}
  window &:last-child { &:backdrop, & { border-top-right-radius: $window_top_radius; }}

  window stack & { // tackles the stacked headerbars case
    &:first-child, &:last-child {
      &:backdrop, & {
        border-top-left-radius: $window_top_radius;
        border-top-right-radius: $window_top_radius;
      }
    }
  }

  window.tiled &,
  window.tiled-top &,
  window.tiled-right &,
  window.tiled-bottom &,
  window.tiled-left &,
  window.maximized &,
  window.fullscreen &,
  window.solid-csd & {
    &, &:backdrop {
      &,
      &:first-child,
      &:last-child,
      &:only-child {
        border-top-left-radius: 0;
        border-top-right-radius: 0;
      }
    }
  }
}

.titlebar:not(headerbar) {
  window.csd > & {
    // in csd we assume every titlebar is a headerbar so reset anything, this is needed for split toolbars cases
    padding: 0;
    background-color: transparent;
    background-image: none;
    border-style: none;
    border-color: transparent;
    box-shadow: none;
  }

  @if $gtk == 3.22 {
    > separator { background-color: $borders_color; }  // FIXME: use darker border?
  }

  @if $gtk >= 3.24 {
    separator { background-color: $borders_color; }  // FIXME: use darker border?
  }

  @extend %titlebar;
}

// Development versions of apps to use a differently styled headerbar

window.devel {
  headerbar.titlebar {
    $gradient: -gtk-icontheme("system-run-symbolic") 90% 0/256px 256px no-repeat,
               linear-gradient(to right, transparent 65%, transparentize($selected_bg_color, 0.7));
    @if $variant == 'dark' {
      $gradient: -gtk-icontheme("system-run-symbolic") 90% 0/256px 256px no-repeat,
                 linear-gradient(to right, transparent 65%, transparentize($selected_bg_color, 0.7));
    }

    background: $bg_color $gradient;
    color: transparentize($fg_color,.9);

    label { color: $fg_color; }

    &:backdrop {
      background: $bg_color -gtk-icontheme("system-run-symbolic") 90% 0/256px 256px no-repeat,
                  image($bg_color); /* background-color would flash */
      color: transparentize($fg_color,.95);

      label { color: $backdrop_fg_color; }
    }
  }
}

/************
 * Pathbars *
 ************/

// GtkPathBar does not work with just .linked, so we must override that. But we
// can’t simply remove .linked from the widget as that might break other themes.
// Note also we select on filechooser to avoid interfering with NautilusPathBar.
filechooser .path-bar.linked > button {
  @extend %linked_flippable;
}

.path-bar button {
  &.text-button, &.image-button, & {
    padding-left: 2px;
    padding-right: 2px;
  }

  &.text-button.image-button label {
    padding-left: 0;
    padding-right: 0;
  }

  &.text-button.image-button, & {
    label:last-child { padding-right: 8px; }
    label:first-child { padding-left: 8px; }
  }

  image {
    padding-left: 4px;
    padding-right: 4px;
  }

  &.slider-button {
    padding-left: 0;
    padding-right: 0;
  }
}

/**************
 * Tree Views *
 **************/
treeview.view {
  @at-root * {
    -GtkTreeView-horizontal-separator: 4;
    -GtkTreeView-grid-line-width: 1;
    -GtkTreeView-grid-line-pattern: '';
    -GtkTreeView-tree-line-width: 1;
    -GtkTreeView-tree-line-pattern: '';
    -GtkTreeView-expander-size: 16;
   }

  border-left-color: mix($fg_color, $base_color, 50%); // this is actually the tree lines color,
  border-top-color: $bg_color;                         // while this is the grid lines color, better then nothing

  rubberband { @extend rubberband; } // to avoid borders being overridden by the previously set props

  &:selected {
    border-left-color: mix($selected_fl_color, $selected_bl_color, 50%);
    border-top-color: transparentize($fg_color, 0.9); // doesn't work unfortunatelly

    &:focus, & {
      border-radius: 0;

      @extend %selected_items;
    }
  }

  &:disabled {
    color: $insensitive_fg_color;

    &:selected { color: mix($selected_fl_color, $selected_bl_color, 40%); }
  }

  &.separator {
    min-height: 2px;
    color: $bg_color;
  }

  &:drop(active) {
    border-style: solid;
    border-width: 1px;
    border-color: $drop_target_color;

    &.after { border-top-style: none; }

    &.before { border-bottom-style: none; }
  }

  &.expander {
    -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');

    &:dir(rtl) { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic-rtl'); }

    color: mix($text_color, $base_color, 70%);

    &:hover { color: $text_color; }

    &:selected {
      color: mix($selected_fl_color, $selected_bl_color, 70%);

      &:hover { color: $selected_fl_color; }
    }

    &:checked { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
  }

  &.progressbar { // progress bar in treeviews

    border: 1px solid $treeview_progressbar_highlight_borders_color;
    background-color: $treeview_progressbar_highlight_color;
    border-radius: 2px;

    &:selected {
      &:focus, & {
        border-color: $treeview_progressbar_selected_highlight_borders_color;
        background-color: $treeview_progressbar_selected_highlight_color;
        border-radius: 2px;
      }
    }

    &:disabled {
      @if $scale_style == fancy and $variant == light { border-color: mix($treeview_progressbar_borders_color, $treeview_progressbar_highlight_borders_color, 50%); }

      @if $variant == 'dark' { color: mix($insensitive_fg_color, $selected_fg_color, 70%); } }
  }

  &.trough { // progress bar trough in treeviews
    border: 1px solid $treeview_progressbar_borders_color;
    background-color: $treeview_progressbar_trough_color;
    border-radius: 2px;

    &:selected {
      &:focus, & {
        border-color: $treeview_progressbar_selected_borders_color;
        background-color: mix($treeview_progressbar_trough_color, $selected_bl_color, 85%);
        border-radius: 2px;
      }
    }
  }

  header {
    padding: 4px;
    margin: 4px;
    button {
      $_column_header_color: mix($fg_color, $base_color, 60%);

      $_column_header_bg_focus_color: if($variant == light, mix($column_header_bg_color, $fg_color, 92%), mix($column_header_bg_color, $fg_color, 90%));
      $_column_header_edge_shadow: if($variant == light, transparentize(white, .4), transparentize(white, .96));
      $_column_header_separator_above_table_grid: if($variant == light, transparentize(black, .85), transparentize(white, .85));
      $_column_header_separator_right_shadow: if($variant == light, transparentize(white, .6), transparentize(black, .9));

      @extend %column_header_button;

      color: $_column_header_color;
      background-color: $column_header_bg_color;

      font-weight: bold;
      font-size: smaller;
      text-shadow: none;

      outline-style: none;

      @if $style == prime {
        box-shadow: -7px 0px 0px -6px $_column_header_separator_above_table_grid,
                    inset 0 1px $_column_header_edge_shadow;

        &:first-child { box-shadow: inset 1px 1px $_column_header_edge_shadow; }

        &:last-child {
          box-shadow: -7px 0px 0px -6px $_column_header_separator_above_table_grid,
                      inset -1px 1px $_column_header_edge_shadow;
        }

        &:only-child {
          box-shadow: inset 1px 1px $_column_header_edge_shadow,
                      inset -1px 0 $_column_header_edge_shadow;
        }
      }

      @if $style == flat {
        box-shadow: -7px 0px 0px -6px $_column_header_separator_above_table_grid;

        &:first-child,
        &:only-child { box-shadow: none; }
      }

      &:focus {
        @extend %column_header_button;

        background-color: $_column_header_bg_focus_color;

        box-shadow: inset -2px 0 $column_header_bg_color,
                    inset 1px 0 $column_header_bg_color,
                    -7px 0px 0px -6px $_column_header_separator_above_table_grid;

        &:first-child { box-shadow: inset -2px 0 $column_header_bg_color; }

        &:last-child {
          box-shadow: inset 1px 0 $column_header_bg_color,
                      -7px 0px 0px -6px $_column_header_separator_above_table_grid;
        }

        &:only-child { box-shadow: none; }
      }

      &:hover {
        @extend %column_header_button;

        color: mix($_column_header_color, $fg_color, 50%);
        transition: none; //I shouldn't need this
      }

      &:active {
        @extend %column_header_button;

        color: $fg_color;
        transition: none; //I shouldn't need this
      }
    }
  }

  button.dnd,
  header.button.dnd { // for treeview-like derive widgets
    &:active, &:selected, &:hover, & {
      padding: 0 6px;
      color: $base_color;
      background-image: none;
      background-color: $selected_bl_color;
      border-style: none;
      border-radius: 0;
      box-shadow: inset 0 0 0 1px $base_color;
      text-shadow: none;
      transition: none;
    }
  }

  acceleditor > label { background-color: $selected_bl_color; color: $selected_fl_color; } // see tests/testaccel to test
}

%column_header_button {
  padding: 0 6px;
  background-image: none;
  border-style: none none solid none;
  border-color: mix($bg_color, $borders_color, 50%);
  border-radius: 0;
  text-shadow: none;

  &:disabled {
    border-color: $bg_color;
    background-image: none;
  }

  &:last-child { border-right-style: none; }
}


/*********
 * Menus *
 *********/
menubar,
.menubar {
  -GtkWidget-window-dragging: true;
  padding: 0px;
  box-shadow: inset 0 -1px transparentize(black, 0.9);

  > menuitem {
    min-height: $menubar_height;
    padding: 3px 8px;
    border-left: 3px solid transparent;

    &:hover { //Seems like it :hover even with keyboard focus
      color: $link_color;
      box-shadow: if($variant == 'light', inset 0 -2px mix($selected_bg_color, $bg_color, 70%), inset 0 -3px $selected_bg_color);
    }

    &:disabled {
      color: $insensitive_fg_color;
      box-shadow: none;
    }
  }
}

// Needed to make the border-radius of menus work
// otherwise the background bleeds out of the menu edges
.background.popup { background-color: transparent; }

menu,
.menu,
.context-menu {
  margin: 4px; // see https://bugzilla.gnome.org/show_bug.cgi?id=591258
  padding: 2px 0;
  background-color: $menu_color;
  border: 1px solid $borders_color; // adds borders in a non composited env

  @if $style == prime {
    box-shadow: inset 0 0 0 1px if($variant == light, transparentize(white, .2), transparentize(white, .97));
  }

  // lounge: light theme looks bad in non composited env without margins on menuitems
  menuitem {
    margin-left: 3px;
    margin-right: 3px;
  }

  .csd & {
    border: none; // axes borders in a composited env
    border-radius: $menu_radius;

    //lounge: disable margins in composited env
    menuitem {
      margin-left: 2px;
      margin-right: 2px;
    }
  }

  menuitem {
    min-height: $menuitem_height;
    min-width: 40px;
    padding: $base_menuitem_padding;
    text-shadow: none;
    border-radius: 0;
    border: 1px solid transparent;

    &:hover { @extend %menuitem_hover; }

    &:disabled { color: $insensitive_fg_color; }

    // submenu indicators
    arrow {
      min-height: 16px;
      min-width: 16px;

      &:dir(ltr) {
        -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');
        margin-left: 10px;
      }

      &:dir(rtl) {
        -gtk-icon-source:-gtk-icontheme('pan-end-symbolic-rtl');
        margin-right: 10px;
      }
    }

    // avoids labels color being overridden, see
    // https://bugzilla.gnome.org/show_bug.cgi?id=767058
    label { &:dir(rtl), &:dir(ltr) { color: inherit; }}
  }

  // overflow arrows
  > arrow {
    @include button(undecorated);

    min-height: 16px;
    min-width: 16px;
    padding: 4px;
    background-color: $menu_color;
    border-radius: 0;

    &.top {
      margin-top: -2px;
      border-bottom: 1px solid mix($fg_color, $base_color, 10%);
      border-top-left-radius: 3px;
      border-top-right-radius: 3px;
      -gtk-icon-source: -gtk-icontheme('pan-up-symbolic');
    }

    &.bottom {
      margin-bottom: -6px;
      margin-top: 4px;
      border-top: 1px solid mix($fg_color, $base_color, 10%);
      border-bottom-left-radius: 3px;
      border-bottom-right-radius: 3px;
      -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
    }

    &:hover { background-color: mix($fg_color, $base_color, 10%); }

    &:disabled {
      color: transparent;
      background-color: transparent;
      border-color: transparent ;
    }
  }
  separator { margin: 1px; }
}

menuitem {
  accelerator { color: gtkalpha(currentColor,0.55); }

  check,
  radio {
    min-height: 16px;
    min-width: 16px;

    &:dir(ltr) { margin-right: 7px; }
    &:dir(rtl) { margin-left: 7px; }
  }
}

/***************
 * Popovers   *
 ***************/

popover.background {
  padding: 2px;
  background-color: $popover_bg_color;

  .csd & { border-radius: $popover_radius; }

  .csd &, & { border: 1px solid $borders_color; }

  box-shadow: 0 1px 2px transparentize(black, 0.8);

  &:backdrop { box-shadow: none; }

  @if $size == compact {
    > stack { margin: -4px; }
  }

  &.scale-popup { padding: 4px 2px; }

  > list,
  > .view,
  > toolbar {
    border-style: none;
    background-color: transparent;
  }

  .csd &, & {
    &.touch-selection,
    &.magnifier {
      @extend %osd;

      border: 1px solid transparentize(white, 0.9);

      button { @extend %osd_button };
    }

    &.osd { @extend %osd; }
  }

  separator { margin: 1px 0; }

  list separator { margin: 0px; }

}

/*************
 * Notebooks *
 *************/
notebook {
  > header {
    padding: 1px;
    border-color: $borders_color;
    border-width: 1px;
    background-color: darken($bg_color, 2%);

    button {
      padding: $notebook_header_button_padding;

      &.circular { padding: $notebook_header_circular_button_padding; }
    }

    tabs { margin: -1px; }

    &.top {
      border-bottom-style: solid;

      > tabs {
        margin-bottom: -2px;

        > tab {
          &:not(.reorderable-page) {
            margin-top: $notebook_header_gap_padding;
            border-bottom-style: none;
            border-radius: $notebook_tab_radius $notebook_tab_radius 0 0;
            -gtk-outline-radius: $notebook_tab_radius $notebook_tab_radius 0 0;
          }

          &:hover {
            &.reorderable-page { box-shadow: inset 0 -1px $borders_color; }
          }
          &:checked {
            // lounge: workaround for libreoffice tabbed toolbar
              box-shadow: 0 2px $base_color;
            &.reorderable-page { box-shadow: inset 0 -1px $borders_color; }
          }
        }
      }
    }

    &.bottom {
      border-top-style: solid;

      > tabs {
        margin-top: -2px;

        > tab {
          &:not(.reorderable-page) {
            margin-bottom: $notebook_header_gap_padding;
            border-top-style: none;
            border-radius: 0 0 $notebook_tab_radius $notebook_tab_radius;
            -gtk-outline-radius: 0 0 $notebook_tab_radius $notebook_tab_radius;
          }

          &:hover, &:checked {
            &.reorderable-page { box-shadow: inset 0 -1px $borders_color; }
          }
        }
      }
    }

    &.left {
      border-right-style: solid;

      > tabs {
        margin-right: -2px;

        > tab {
          &:not(.reorderable-page) {
            margin-left: $notebook_header_gap_padding;
            border-right-style: none;
            border-radius: $notebook_tab_radius 0 0 $notebook_tab_radius;
            -gtk-outline-radius: $notebook_tab_radius 0 0 $notebook_tab_radius;
          }

          &:hover, &:checked {
            &.reorderable-page { box-shadow: inset -1px 0 $borders_color; }
          }
        }
      }
    }

    &.right {
      border-left-style: solid;
      > tabs {
        margin-left: -2px;
        > tab {
          &:not(.reorderable-page) {
            margin-right: $notebook_header_gap_padding;
            border-left-style: none;
            border-radius: 0 $notebook_tab_radius $notebook_tab_radius 0;
            -gtk-outline-radius: 0 $notebook_tab_radius $notebook_tab_radius 0;
          }

          &:hover, &:checked {
            &.reorderable-page { box-shadow: inset 1px 0 $borders_color; }
          }
        }
      }
    }

    &.top > tabs > arrow {
      @extend %notebook_vert_arrows;

      border-top-style: none;
    }

    &.bottom > tabs > arrow {
      @extend %notebook_vert_arrows;

      border-bottom-style: none;
    }

    @at-root %notebook_vert_arrows {
      margin-left: -3px;
      margin-right: -3px;
      padding-left: 4px;
      padding-right: 4px;

      &.down { -gtk-icon-source: -gtk-icontheme('pan-start-symbolic'); }

      &.up { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic'); }
    }

    &.left > tabs > arrow {
      @extend %notebook_horz_arrows;

      border-left-style: none;
    }

    &.right > tabs > arrow {
      @extend %notebook_horz_arrows;

      border-right-style: none;
    }

    @at-root %notebook_horz_arrows {
      margin-top: -3px;
      margin-bottom: -3px;
      padding-top: 4px;
      padding-bottom: 4px;

      &.down { -gtk-icon-source: -gtk-icontheme('pan-up-symbolic'); }

      &.up { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
    }

    > tabs > arrow {
      @extend %button_basic;

      @extend %button_basic.flat;

      min-height: 16px;
      min-width: 16px;
      border-radius: 0;

      &:hover:not(:active):not(:backdrop) {
        background-clip: padding-box;
        background-image: none;
        background-color: transparentize(white, 0.7);
        border-color: transparent;
        box-shadow: none;
      }

      &:disabled { @include button(undecorated); }
    }

    tab {
      min-height: $tab_min_size;
      min-width: $tab_min_size;
      padding: 3px 12px;

      outline-offset: if($variant == light, -1px, -2px);
      outline-color: if($variant == light, gtkalpha(currentColor, 0.4), gtkalpha(currentColor, 0.2));

      color: $insensitive_fg_color;
      font-weight: bold;

      border-width: 1px;         // for reorderable tabs
      border-color: transparent; //

      &:not(.reorderable-page) { border-style: solid; }

      &:hover {
        color: mix($insensitive_fg_color, $fg_color, 50%);

        &.reorderable-page {
          border-color: transparentize($borders_color, 0.6);
          background-color: if($variant == 'light', transparentize(white, 0.7), transparentize(white, 0.98));
        }
      }

      &:backdrop {
        color: mix($backdrop_fg_color, $bg_color, 60%);
        &:checked { color: $backdrop_fg_color; }
      }

      &:checked {
        background-color: $base_color;
        border-color: $borders_color;
        color: $fg_color;

        &.reorderable-page {
          border-color: transparentize($borders_color, 0.4);
          background-color: if($variant == 'light', transparentize(white, 0.5), transparentize(white, 0.97));

          &:hover { background-color: if($variant == 'light', transparentize(white, 0.35), transparentize(white, 0.96)); }
        }
      }

      // colors the button like the label, overridden otherwise
      button.flat {
        color: gtkalpha(currentColor, 0.5);

        &:hover { color: currentColor; }

        padding: $tab_button_padding;
        margin-top: $tab_button_horz_margin;
        margin-bottom: $tab_button_horz_margin;
        // FIXME: generalize .small-button?
        min-width: 20px;
        min-height: 20px;

        &:last-child {
          margin-left: 4px;
          margin-right: -4px;
        }

        &:first-child {
          margin-left: -4px;
          margin-right: 4px;
        }
      }
    }

    &.top,
    &.bottom {
      tabs {
        padding-left: 4px;
        padding-right: 4px;

        &:not(:only-child) {
          margin-left: 3px;
          margin-right: 3px;

          &:first-child { margin-left: -1px; }
          &:last-child { margin-right: -1px; }
        }

        tab {
          margin-left: 4px;
          margin-right: 4px;

          &.reorderable-page { border-style: none solid; }
        }
      }
    }

    &.left,
    &.right {
      tabs {
        padding-top: 4px;
        padding-bottom: 4px;

        &:not(:only-child) {
          margin-top: 3px;
          margin-bottom: 3px;

          &:first-child { margin-top: -1px; }
          &:last-child { margin-bottom: -1px; }
        }

        tab {
          margin-top: 4px;
          margin-bottom: 4px;

          &.reorderable-page { border-style: solid none; }
        }
      }
    }

    &.top tab { padding-bottom: 3px; }
    &.bottom tab { padding-top: 3px; }
  }

  > stack:not(:only-child) { // the :not(:only-child) is for "hidden" notebooks
    background-color: $base_color;
  }
}


/**************
 * Scrollbars *
 **************/
scrollbar {
  $_slider_min_length: 40px;

  // disable steppers
  @at-root * {
    -GtkScrollbar-has-backward-stepper: false;
    -GtkScrollbar-has-forward-stepper: false;
  }

  background-color: transparent;
  transition: 300ms $ease-out-quad;

  &:not(.overlay-indicator) { background-color: $bg_color; }

  &.horizontal trough {
    border-image: -gtk-scaled(url("assets/scrollbar-trough-horz#{$style_suffix}#{$asset_suffix}.png"), url("assets/scrollbar-trough-horz#{$style_suffix}#{$asset_suffix}@2.png")) 9 9 8 8 / 9px 9px 8px 8px stretch;
  }

  &.vertical trough {
    border-image: -gtk-scaled(url("assets/scrollbar-trough-vert#{$style_suffix}#{$asset_suffix}.png"), url("assets/scrollbar-trough-vert#{$style_suffix}#{$asset_suffix}@2.png")) 9 9 8 8 / 9px 9px 8px 8px stretch;
  }

  // slider
  slider {
    min-width: $scrollbar_slider_size;
    min-height: $scrollbar_slider_size;
    margin: 2px;
    border: 1px solid $scrollbar_borders_color;
    border-radius: 3px;
    background-clip: padding-box;
    background-color: $scrollbar_slider_color;
    background-position: center;
    background-repeat: no-repeat;

    @if $style == prime {
      @if $variant == 'light' {
        box-shadow: inset 1px 1px transparentize(white, 0.8),
                    inset -1px -1px transparentize(black, 0.92);
      }
      @else {
        box-shadow: inset 1px 1px transparentize(white, 0.95),
                    inset -1px -1px transparentize(black, 0.9);
      }
    }


    &:hover { background-color: $scrollbar_slider_hover_color; }

    &:hover:active { background-color: $scrollbar_slider_active_color; }

    &:disabled { background-color: transparent; }
  }

  // lounge: libreoffice hack - libreoffice scrollbars has different behaviour, but they ignore direction (:dir),
  //         so, we set values for libreoffice, and then override it with regular values using direction.
  &.horizontal slider { margin-left: 1px; margin-right: 1px; }
  &.vertical slider { margin-top: 1px; margin-bottom: 1px; }

  &.horizontal:dir(ltr) slider { margin-left: 3px; margin-right: 3px; }
  &.horizontal:dir(rtl) slider { margin-left: 3px; margin-right: 3px; }
  &.vertical:dir(ltr) slider { margin-top: 3px; margin-bottom: 3px; }
  &.vertical:dir(rtl) slider { margin-top: 3px; margin-bottom: 3px; }

  @if $scrollbar_handles == with_handles {
    &.horizontal slider {
      background-image: -gtk-scaled(url("assets/scrollbar-handle-horz#{$asset_suffix}.png"), url("assets/scrollbar-handle-horz#{$asset_suffix}@2.png"));
    }

    &.vertical slider {
      background-image: -gtk-scaled(url("assets/scrollbar-handle-vert#{$asset_suffix}.png"), url("assets/scrollbar-handle-ver#{$asset_suffix}t@2.png"));
    }
  }

  &.fine-tune {
    slider {
      &:hover:active {
        background-image: none;
        background-color: $scrollbar_slider_finetune_color;
        border-color: $selected_borders_color;
      }
    }
  }

  &.overlay-indicator {
    &:not(.dragging):not(.hovering) {
      border-color: transparent;
      background-color: transparent;

      trough { border-image: none; }

      slider {
        margin: 0;
        min-width: 3px;
        min-height: 3px;
        border-radius: 1px;
        background-color: transparentize($fg_color, 0.8);
        border: 1px solid if($variant == 'light', transparentize(white, 0.6), transparentize(black, 0.6));
        box-shadow: none;
        background-image: none;
      }

      button {
        min-width: 5px;
        min-height: 5px;
        background-color: transparentize($fg_color, 0.6);
        background-clip: padding-box;
        border-radius: 100%;
        border: 1px solid if($variant == 'light', transparentize(white, 0.6), transparentize(black, 0.6));
        -gtk-icon-source: none;
      }

      &.horizontal {
        slider {
          margin: 0 1px;
          min-width: $_slider_min_length;
        }

        button {
          margin: 1px 2px;
          min-width: 5px;
        }
      }

      &.vertical {
        slider {
          margin: 2px 0;
          min-height: $_slider_min_length;
        }

        button {
          margin: 2px 1px;
          min-height: 5px;
        }
      }
    }

    &.dragging,
    &.hovering { opacity: 0.8; }
  }

  &.horizontal slider { min-width: $_slider_min_length; }

  &.vertical slider { min-height: $_slider_min_length; }

  // button styling
  button {
    padding: 0;
    min-width: 12px;
    min-height: 12px;
    border-style: none;
    border-radius: 0;
    transition-property: min-height, min-width, color;

    @include button(undecorated);

    color: $scrollbar_slider_color;

    &:hover {
      @include button(undecorated);

      color: $scrollbar_slider_hover_color;
    }
    &:active, &:checked {
      @include button(undecorated);

      color: $scrollbar_slider_active_color;
    }
    &:disabled {
      @include button(undecorated);

      color: transparentize($scrollbar_slider_color, 0.8);
    }
  }

  // button icons
  &.vertical {
    button {
      &.down { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }

      &.up { -gtk-icon-source: -gtk-icontheme('pan-up-symbolic'); }
    }
  }

  &.horizontal {
    button {
      &.down { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic'); }

      &.up { -gtk-icon-source: -gtk-icontheme('pan-start-symbolic'); }
    }
  }
}

treeview ~ scrollbar.vertical {
//  border-top: 1px solid $borders_color;
//  margin-top: -1px;
}

/**********
 * Switch *
 **********/
switch {
  font-size: 0;
  outline-offset: -4px;

  // similar to the .scale
  border: 1px solid $borders_color;
  border-radius: 9999px;
  color: $fg_color;
  background-color: $dark_fill;

  @if $style == prime {
    box-shadow: inset 1px 1px transparentize(black, .92);
  }

  &:checked {
    color: $selected_fl_color;
    border-color: if($variant == 'light', desaturate(darken($selected_bl_color, 25%), 20%),
                                          darken($selected_bl_color, 0%));
    background-color: if($variant == 'light', darken($selected_bl_color, 10%),
                                              lighten($selected_bl_color, 5%));
  }

  &:disabled {
    color: $insensitive_fg_color;
    border-color: if($variant == 'light', $borders_color, lighten($borders_color, 3%));
    background-color: $insensitive_bg_color;
    box-shadow: none;
  }

  slider {
    margin: -1px;
    min-width: $switch_size;
    min-height: $switch_size;
    border: 1px solid;
    border-radius: 9999px;
    transition: $button_transition;
    -gtk-outline-radius: 9999px;
    outline-offset: if($variant == 'light', -1px, -2px);

    @include button(normal-alt);
  }

  image { color: transparent; } // hide i / o

  &:hover slider { @include button(hover-alt); }

  &:checked slider {
    @include button(normal-alt);
    border: 1px solid if($variant == 'light', desaturate(darken($selected_bl_color, 25%), 20%), darken($selected_bl_color, 0%));

    @if $variant == 'dark' { &:hover { background-image: image(lighten($bg_color, 5%)); }}
  }

  &:disabled slider {
    @include button(insensitive);
    @if $variant == 'dark' { border-color: lighten($borders_color, 3%); }
  }

  row:selected & {
    @if $variant == light { &:not(:checked):not(:disabled) { border-color: $alt_borders_color; }}

    @if $variant == 'dark' { &:checked { box-shadow: 0 0 0 1px transparentize(black, .5); }}
  }
}


/*************************
 * Check and Radio items *
 *************************/
// draw regular check and radio items using our PNG assets
// all assets are rendered from assets.svg. never add pngs directly


//selection-mode
.view.content-view.check:not(list),
.content-view .tile check:not(list) {
  -gtk-icon-shadow: none;
  background-color: transparent;
  min-width: 40px;
  min-height: 40px;
  background-image: -gtk-scaled(url("assets/checkbox-selectionmode#{$style_suffix}#{$asset_suffix}.png"),
                                 url("assets/checkbox-selectionmode#{$style_suffix}#{$asset_suffix}@2.png"));
  transition: 200ms;
  box-shadow: none;
  border-width: 0;
  padding: 0;
  // lounge: margins are for space between check and outline (outline-offset and -gtk-outline-radius doesnt work here)
  margin: 2px;

  &:checked {
    background-image: -gtk-scaled(url("assets/checkbox-checked-selectionmode#{$style_suffix}#{$asset_suffix}.png"),
                                  url("assets/checkbox-checked-selectionmode#{$style_suffix}#{$asset_suffix}@2.png"));
    -gtk-icon-source: -gtk-scaled(url("assets/check-selectionmode-#{$tone}#{$style_suffix}#{$asset_suffix}.png"),
                                  url("assets/check-selectionmode-#{$tone}#{$style_suffix}#{$asset_suffix}@2.png"));
  }
}

checkbutton.text-button, radiobutton.text-button {
  // this is for a nice focus on check and radios text
  padding: 2px 0;
  outline-offset: 0;

  label:not(:only-child) {
    &:first-child { margin-left: 4px; }
    &:last-child { margin-right: 4px; }
  }
}

check,
radio {
  margin: 0 4px;

  &:only-child { margin: 0; }

  popover & { // when in a popover add more space between the label and the check, reset the other side margin.
              // See https://bugzilla.gnome.org/show_bug.cgi?id=779570 for details.
    &.left:dir(rtl) {
      margin-left: 0;
      margin-right: 12px;
    }

    &.right:dir(ltr) {
      margin-left: 12px;
      margin-right: 0;
    }
  }

  min-height: 14px;
  min-width: 14px;
  border: 1px solid;
  -gtk-icon-source: none;

  @include button(normal-alt);

  @if $style == prime {
    box-shadow: inset 1px 1px transparentize(black, .9);

    &:not(check) { box-shadow: inset 0 1px transparentize(black, .9); }
  }

  &:hover {
    @include button(hover-alt);

    @if $style == prime {
      box-shadow: inset 1px 1px transparentize(black, .9);

      &:not(check) { box-shadow: inset 0 1px transparentize(black, .9); }
    }

    @if $variant == 'dark' { background: image(lighten($bg_color, 5%)); }
  }

  &:active {
    @include button(active);
    border-color: $alt_borders_color;

    @if $style == prime {
      box-shadow: inset 1px 1px transparentize(black, .9);

      &:not(check) { box-shadow: inset 0 1px transparentize(black, .9); }
    }

    @if $variant == 'dark' { background: image(darken($bg_color, 3%)); }
  }

  &:disabled {
    @include button(insensitive);

    @if $variant == 'dark' { border-color: mix($alt_borders_color, $bg_color, 50%); }
  }

  .osd & {
    @include button(osd);

    &:hover { @include button(osd); }

    &:active { @include button(osd-active); }

    &:disabled { @include button(osd-insensitive); }
  }

  menu menuitem & { margin: 0; } // this is a workaround for a menu check/radio size allocation issue

  menu menuitem &,
  popover & {
    &,
    &:hover,
    &:disabled { //FIXME use button reset mixin
      min-height: 14px;
      min-width: 14px;
      background-image: none;
      background-color: transparent;
      box-shadow: none;
      -gtk-icon-shadow: none;
      color: inherit;
      border-color: gtkalpha(currentColor, .7);
    }
  }
}

%check,
check {
  border-radius: $check_radius;

  &:checked { -gtk-icon-source: image(-gtk-recolor(url("assets/check-symbolic.svg")),
                                      -gtk-recolor(url("assets/check-symbolic.symbolic.png"))); }

  &:indeterminate { -gtk-icon-source: image(-gtk-recolor(url("assets/dash-symbolic.svg")),
                                            -gtk-recolor(url("assets/dash-symbolic.symbolic.png"))); }
}

%radio,
radio {
  border-radius: 100%;

  &:checked { -gtk-icon-source: image(-gtk-recolor(url("assets/bullet-symbolic.svg")),
                                      -gtk-recolor(url("assets/bullet-symbolic.symbolic.png"))); }

  &:indeterminate { -gtk-icon-source: image(-gtk-recolor(url("assets/dash-symbolic.svg")),
                                            -gtk-recolor(url("assets/dash-symbolic.symbolic.png"))); }
}

// ANIMATION:
// this is made with those pretty convoluted transitions, since checks and radios have to animate only on state changes,
// the transformation is set on the active state and it get reset on the checked state.
radio:not(:indeterminate):not(:checked):active:not(:backdrop) { -gtk-icon-transform: scale(0); }

check:not(:indeterminate):not(:checked):active:not(:backdrop) { -gtk-icon-transform: translate(6px, -3px) rotate(-45deg) scaleY(0.2) rotate(45deg) scaleX(0); }

radio,
check {
  &:active { -gtk-icon-transform: scale(0, 1); } // should tackle the indeterminate state, untested

  &:checked:not(:backdrop), &:indeterminate:not(:backdrop) {
    -gtk-icon-transform: unset;
    transition: 400ms;
  }
}

menu menuitem {
  radio,
  check {
     &:checked:not(:backdrop), &:indeterminate:not(:backdrop) { transition: none; }
  }
}

treeview.view check,
treeview.view radio {
  &:selected {
    &:focus, & { color: $fg_color; }

    &:disabled { color: $insensitive_fg_color; }
  }
}

treeview.view radio:selected { &:focus, & { @extend %radio; }} // This is a workaround


/************
 * GtkScale *
 ************/
%scale_trough {
  border: 1px solid $borders_color;
  border-radius: $base_radius;
  background-color: $scale_trough_color;

  @if $style == prime {
    box-shadow: inset 1px 1px transparentize(black, .95);
  }

  &:disabled { 
    background-color: if($variant=='light', mix($insensitive_bg_color, $dark_fill, 40%), mix($insensitive_bg_color, $dark_fill, 70%));
    border-color: mix($borders_color, $bg_color, 70%);
    box-shadow: none;
  }

  // ...on selected list rows
  row:selected & {
    @if $variant == light {
      border-color: $alt_borders_color;
      background-color: darken($dark_fill, 10%);
    }

    @else { row:selected & { box-shadow: 0 0 0 1px $bg_color; }}
  }
  // OSD
  .osd & {
    border-color: $osd_borders_color;
    background-color: if($variant=='light', transparentize($osd_borders_color, 0.2), transparentize(black, 0.6));

    &:disabled { background-color: $osd_insensitive_bg_color; }
  }

  popover.background & {
    @if $variant == 'dark' {
      background-color: darken($dark_fill, 5%);
    }
  }
}

%scale_highlight {
  border: 1px solid $scale_highlight_borders_color;
  border-radius: $base_radius;
  background-color: $scale_highlight_color;

  @if $style == prime {
    @if $variant == light {
      box-shadow: inset 1px 1px transparentize(white, .3), inset -1px -1px transparentize($borders_color, .85);

      @if $scale_style == fancy { box-shadow: inset 1px 1px transparentize(white, .9), inset -1px -1px transparentize($selected_borders_color, .9); }
    }
    @else {
      box-shadow: inset 1px 1px transparentize(white, .92), inset -1px -1px transparentize($borders_color, .8);
    }
  }

  &:disabled {
    background-color: transparent;
    border-color: mix($borders_color, $bg_color, 70%);
    box-shadow: none;

    @if $variant=='dark' { border-color: lighten($borders_color, 4%); }
  }

  // ...on selected list rows
  row:selected & {
    @if $variant == light and $scale_style == casual { border-color: $alt_borders_color; }

    @if $variant == dark { box-shadow: 0 0 0 1px $bg_color; }
  }

  // OSD
  .osd & {
    border-color: $osd_borders_color;
    background-color: if($scale_style == casual, lighten($osd_bg_color, 15%), $selected_bg_color);

    @if $style == prime {
      box-shadow: inset 1px 1px transparentize(white, .9), inset -1px -1px transparentize(darken($osd_borders_color, 10%), .8);
    }

    &:disabled {
      background-color: $osd_insensitive_bg_color;
      box-shadow: none;
    }
  }
}

scale {
  // sizing
  $_marks_length: 6px;
  $_marks_distance: 6px;

  min-height: 10px;
  min-width: 10px;
  padding: 12px;

  // those are inside the trough node, I need them to show their own border over the trough one, so negative margin
  fill,
  highlight { margin: -1px; }

  // the slider is inside the trough, so to have make it bigger there's a negative margin

  slider {
    min-height: $scale_slider;
    min-width: $scale_slider;
    margin: $scale_slider_margin;
  }

  // click-and-hold the slider to activate
  &.fine-tune {
    &.horizontal {
      padding-top: 10px;
      padding-bottom: 10px;
      min-height: 14px;
    }

    &.vertical {
      padding-left: 10px;
      padding-right: 10px;
      min-width: 14px;
    }

    // to make the trough grow in fine-tune mode
    slider { margin: $scale_slider_finetune_margin; }

    fill,
    highlight,
    trough {
      border-radius: $base_radius;
      -gtk-outline-radius: 3px;
    }
  }

  // the backing bit
  trough {
    @extend %scale_trough;

    outline-color: if($variant == light, gtkalpha(currentColor, 0.25), gtkalpha(black, 0.25));
    outline-offset: 1px;
    -gtk-outline-radius: 4px;

    .osd & {
      outline-color: gtkalpha(black, 0.4);
    }
  }

  // the colored part of the backing bit
  highlight { @extend %scale_highlight; }

  // this is another differently styled part of the backing bit, the most relevant use case is for example
  // in media player to indicate how much video stream as been cached
  fill {
    @extend %scale_trough;

    background-color: $borders_color;

    &:disabled {
      border-color: transparent;
      background-color: transparent;
    }

    // OSD
    .osd & {
      background-color: mix($osd_fg_color, $osd_borders_color, 25%);

      &:disabled {
        border-color: transparent;
        background-color: transparent;
      }
    }
  }

  slider {
    @include button(normal-alt);

    border: 1px solid $alt_borders_color;
    border-radius: 100%;
    transition: $button_transition;
    transition-property: background, border, box-shadow;

    &:hover { @include button(hover-alt); }

    &:active {
      @include button(hover-alt);
      box-shadow: none;

      @if $scale_style == fancy { border-color: $selected_borders_color; }
    }

    &:disabled {
      @include button(insensitive);

      border-color: mix($borders_color, $bg_color, 85%);
    }

    // ...on selected list rows

    // OSD
    .osd & {
      @include button(osd);
      background-color: if($variant == 'light', opacify($osd_bg_color, 1), opacify(lighten($osd_bg_color, 10%), 1)); // solid background needed here

      &:hover {
        @include button(osd-hover);
        background-color: if($variant == 'light', opacify($osd_bg_color, 1), opacify(lighten($osd_bg_color, 15%), 1)); // solid background needed here
      }

      &:active {
        @include button(osd-hover);
        background-color: if($variant == 'light', opacify($osd_bg_color, 1), opacify(lighten($osd_bg_color, 15%), 1)); // solid background needed here
      }

      &:disabled {
        @include button(osd-insensitive);
        background-color: opacify($osd_bg_color, 1); // solid background needed here
      }
    }
  }

  marks,
  value { color: gtkalpha(currentColor, 0.55); }

  //marks margins
  @each $scale_orient, $marks_class, $marks_pos, $marks_margin in (horizontal, top, top, bottom),
                                                                  (horizontal, bottom, bottom, top),
                                                                  (vertical, top, left, right),
                                                                  (vertical, bottom, right, left) {
    &.#{$scale_orient} marks {
      &.#{$marks_class} {
        margin-#{$marks_margin}: $_marks_distance;
        margin-#{$marks_pos}: -($_marks_distance + $_marks_length);
      }
    }

    &.#{$scale_orient}.fine-tune marks  {
      &.#{$marks_class} {
        margin-#{$marks_margin}: $_marks_distance;
        margin-#{$marks_pos}: -($_marks_distance + $_marks_length - 2px);
      }
    }
  }

  &.horizontal {
    indicator {
      min-height: $_marks_length;
      min-width: 1px;
    }

    &.fine-tune indicator { min-height: ($_marks_length - 2px); }
  }

  &.vertical {
    indicator {
      min-height: 1px;
      min-width: $_marks_length;
    }

    &.fine-tune indicator { min-width: ($_marks_length - 2px); }
  }

  // *WARNING* scale with marks madness following

  // FIXME: OSD and selected list rows missing, I don't feel like adding the other 144 assets needed for those...
  $suffix: if($variant == 'light', '', '-dark');
  $active_state_scale: if($scale_style == fancy and $variant == light and $tone == tango, '-active-fancy-tango',
                       if($scale_style == fancy and $variant == light and $tone == rumba, '-active-fancy-rumba',
                       if($scale_style == fancy and $variant == light and $tone == salsa, '-active-fancy-salsa',
                       if($scale_style == fancy and $variant == light and $tone == jive, '-active-fancy-jive',
                       '-active')))); 


  @each $dir_class, $dir_infix in ('horizontal', 'horz'),
                                  ('vertical', 'vert') {
    @each $marks_infix, $marks_class in ('scale-has-marks-above', 'marks-before:not(.marks-after)'),
                                        ('scale-has-marks-below', 'marks-after:not(.marks-before)') {
      @each $state, $state_infix in ('', ''),
                                    (':hover', '-hover'),
                                    (':active', '#{$active_state_scale}'),
                                    (':disabled', '-insensitive') {
        &.#{$dir_class}.#{$marks_class} {

          slider {
            &#{$state} {
              $style_suffix_marks: if($style == prime, '',
                                   if($style == flat and $state == ':active', '',
                                   if($style == flat and $state == ':disabled', '',
                                   '-flat')));
              // an asymmetric slider asset is used here, so the margins are uneven, the smaller
              // margin is set on the point side.
              margin: $scale_with_marks_slider_margin;
              $_scale_asset: 'assets/slider-#{$dir_infix}-#{$marks_infix}#{$state_infix}#{$style_suffix_marks}#{$size_suffix}#{$suffix}';
              border-style: none;
              border-radius: 0;

              background-color: transparent;
              background-image: -gtk-scaled(url('#{$_scale_asset}.png'), url('#{$_scale_asset}@2.png'));

              $_scale_slider_bg_pos: bottom;

              @if $dir_class == 'horizontal' {
                min-height: $scale_with_marks_slider_height;
                min-width: $scale_with_marks_slider_width;

                @if $marks_infix == 'scale-has-marks-above' {
                  margin-top: -12px;

                  $_scale_slider_bg_pos: top;
                }

                @else { margin-bottom: -12px; }
              }

              @else {
                min-height: $scale_with_marks_slider_width;
                min-width: $scale_with_marks_slider_height;

                @if $marks_infix == 'scale-has-marks-above' {
                  margin-left: -12px;

                  $_scale_slider_bg_pos: left bottom;
                }

                @else {
                  margin-right: -12px;

                  $_scale_slider_bg_pos: right bottom;
                }
              }

              background-position: $_scale_slider_bg_pos;
              background-repeat: no-repeat;
              box-shadow: none;
            }
          }

          &.fine-tune slider {
            // bigger negative margins to make the trough grow here as well
            margin: $scale_with_marks_slider_finetune_margin;

            @if $dir_class == 'horizontal' {
              @if $marks_infix == 'scale-has-marks-above' { margin-top: -10px; }

              @else { margin-bottom: -10px; }
            }

            @else {
              @if $marks_infix == 'scale-has-marks-above' { margin-left: -10px; }

              @else { margin-right: -10px; }
            }
          }
        }
      }
    }
  }

  &.color {
    min-height: 0;
    min-width: 0;

    trough {
      background-image: image($borders_color);
      background-repeat: no-repeat;
    }

    &.horizontal {
      padding: 0 0 12px 0;

      trough {
        padding-bottom: 4px;
        background-position: 0 -3px;
        border-top-left-radius: 0;
        border-top-right-radius: 0;
      }

      slider {
        &:dir(ltr), &:dir(rtl) { // specificity bumb
          &:hover, &:disabled, & {
            margin-bottom: -12px;
            margin-top: 6px;
          }
        }
      }
    }

    &.vertical {
      &:dir(ltr) {
        padding: 0 0 0 12px;

        trough {
          padding-left: 4px;
          background-position: 3px 0;
          border-bottom-right-radius: 0;
          border-top-right-radius: 0;
        }

        slider {
          &:hover, &:disabled, & {
            margin-left: -12px;
            margin-right: 6px;
          }
        }
      }

      &:dir(rtl) {
        padding: 0 12px 0 0;

        trough {
          padding-right: 4px;
          background-position: -3px 0;
          border-bottom-left-radius: 0;
          border-top-left-radius: 0;
        }

        slider {
          &:hover, &:disabled, & {
            margin-right: -12px;
            margin-left: 6px;
          }
        }
      }
    }

    &.fine-tune {
      &.horizontal {
        &:dir(ltr), &:dir(rtl) { // specificity bump
          padding: 0 0 10px 0;

          trough {
            padding-bottom: 6px;
            background-position: 0 -6px;
          }

          slider {
            margin-bottom: -12px;
            margin-top: 6px;
          }
        }
      }

      &.vertical {
        &:dir(ltr) {
          padding: 0 0 0 10px;

          trough {
            padding-left: 6px;
            background-position: 6px 0;
          }

          slider {
            margin-left: -12px;
            margin-right: 6px;
          }
        }

        &:dir(rtl) {
          padding: 0 10px 0 0;

          trough {
            padding-right: 6px;
            background-position: -6px 0;
          }

          slider {
            margin-right: -12px;
            margin-left: 6px;
          }
        }
      }
    }
  }
}


/*****************
 * Progress bars *
 *****************/
progressbar {
  // sizing
  &.horizontal {
    trough,
    progress { min-height: 4px; }
  }

  &.vertical {
    trough,
    progress { min-width: 4px; }
  }

  &.horizontal progress { margin: 0 -1px; } // the progress node is positioned after the trough border
  &.vertical progress { margin: -1px 0; }   // this moves it over it.


  // FIXME: insensitive state missing and some other state should be set probably
  font-size: smaller;
  color: transparentize($fg_color, 0.6);

  trough { @extend %scale_trough; }

  progress {
    @extend %scale_highlight;

    border-radius: $progressbar_radius;

    &.left {
      border-top-left-radius: $progressbar_radius;
      border-bottom-left-radius: $progressbar_radius;
    }

    &.right {
      border-top-right-radius: $progressbar_radius;
      border-bottom-right-radius: $progressbar_radius;
    }

    &.top {
      border-top-right-radius: $progressbar_radius;
      border-top-left-radius: $progressbar_radius;
    }

    &.bottom {
      border-bottom-right-radius: $progressbar_radius;
      border-bottom-left-radius: $progressbar_radius;
    }
  }

  &.osd { // progressbar.osd used for epiphany page loading progress
    min-width: 3px;
    min-height: 3px;
    background-color: transparent;

    trough {
      border-style: none;
      border-radius: 0;
      background-color: transparent;
      box-shadow: none;
    }

    progress {
      border-style: none;
      border-radius: 0;
    }
  }

  trough.empty progress { all: unset; } // makes the progress indicator disappear, when the fraction is 0
}


/*************
 * Level Bar *
 *************/
levelbar {
  &.horizontal {
    block {
      min-height: 4px;
    }

    &.discrete block {
      margin: 0 1px;
      min-width: 32px;
    }
  }

  &.vertical {
    block {
      min-width: 4px;
    }

    &.discrete block {
      margin: 1px 0;
      min-height: 32px;
    }
  }

  trough {
    border: 1px solid;
    padding: 2px;
    border-radius: 3px;
    @include entry(normal);
  }

  block {
    border: none;
    border-radius: 1px;

    &.low {
      background-color: if($scale_style == casual, transparentize($fg_color, 0.78), $warning_color);
    }

    &.high,
    &:not(.empty) {
      background-color: if($scale_style == casual, transparentize($fg_color, 0.7),
                        if($variant == 'light', darken($selected_bl_color, 10%), $selected_bl_color));
    }

    &.full {
      background-color: if($scale_style == casual, transparentize($fg_color, 0.6), $success_color);
    }

    &.empty {
      background-color: transparentize($fg_color, 0.9);
    }
  }
}


/****************
 * Print dialog *
*****************/
printdialog {
  paper {
    color: $fg_color;
    border: 1px solid $borders_color;
    background: white;
    padding: 0;
  }

  .dialog-action-box { margin: 12px; }
}


/**********
 * Frames *
 **********/
frame > border,
.frame {
  box-shadow: none;
  margin: 0;
  padding: 0;
  border-radius: 0;
  border: 1px solid $borders_color;

  &.flat { border-style: none; }
}

actionbar > revealer >  box {
  padding: 6px;
  border-top: 1px solid $borders_color;
}

scrolledwindow {
  viewport.frame { // avoid double borders when viewport inside scrolled window
    border-style: none;
  }

  // This is used when content is touch-dragged past boundaries.
  // draws a box on top of the content, the size changes programmatically.
  overshoot {
    &.top { @include overshoot(top); }

    &.bottom { @include overshoot(bottom); }

    &.left { @include overshoot(left); }

    &.right { @include overshoot(right); }
  }

  junction { // the small square between two scrollbars
    background-color: $scrollbar_bg_color;
  }
}

//vbox and hbox separators
separator {
  background: if($variant == light, transparentize(black, .9), transparentize(black, .8));
  min-width: 1px;
  min-height: 1px;
}


/*********
 * Lists *
 *********/
list {
  color: $text_color;
  background-color: $base_color;
  border-color: $borders_color;

  row { padding: $list_row_padding; }
}

row {
  transition: all 150ms $ease-out-quad;

  &:hover { transition: none; }

  &.activatable {
    &.has-open-popup, // this is for indicathing which row generated a popover see https://bugzilla.gnome.org/show_bug.cgi?id=754411

    &:hover { background-color: if(variant == light, transparentize($fg_color, 0.9), transparentize($fg_color, 0.95)); }

    &:active { box-shadow: inset 0 2px transparentize(black, 0.95); }

    &:selected {
      &:active { box-shadow: inset 0 2px transparentize(black, 0.8); }

      &.has-open-popup,
      &:hover { background-color: if($variant == light, darken($selected_bl_color, 3%), mix($selected_bl_color, $fg_color, 95%)); }
    }
  }

  &:selected { @extend %selected_items; }
}


/*********************
 * App Notifications *
 *********************/
.app-notification,
.app-notification.frame {
  @extend %osd;

  margin: 4px;
  padding: $app_notification_padding;
  border-radius: $app_notification_radius;
  background-color: if($variant == light, $osd_bg_color, opacify($osd_bg_color, .0));
  background-image: linear-gradient(to bottom, transparentize(black, 0.8),
                                               transparent 1px);
  background-clip: padding-box;
  box-shadow: 1px 1px transparentize(black, .7);

  &:backdrop {
    background-image: none;
    transition: $backdrop_transition;
  }

  button { @extend %osd_button; }

  border { border: none; }
}


/*************
 * Expanders *
 *************/
expander {
  title > arrow {
    min-width: 16px;
    min-height: 16px;
    -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');
    &:dir(rtl) { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic-rtl'); }

    &:hover { color: lighten($fg_color,30%); } //only lightens the arrow
    &:disabled { color: $insensitive_fg_color; }

    &:checked { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
  }
}


/************
 * Calendar *
 ***********/
calendar {
  color: $text_color;
  border: 1px solid $borders_color;

  &:selected {
    @extend %selected_items;

    border-radius: 3px;
  }

  &.header { border-bottom-color: transparentize(black, 0.9); }

  &.button {
    @extend %undecorated_button;

    color: transparentize($fg_color, 0.55);

    &:hover { color: $fg_color; }

    &:disabled { color:  transparentize($insensitive_fg_color,0.55); }
  }

  &.highlight { color: $insensitive_fg_color; }

  &:indeterminate { color: gtkalpha(currentColor, 0.1); }
}


/***********
 * Dialogs *
 ***********/
messagedialog { // Message Dialog styling
  .titlebar {
    min-height: 20px;
    background-image: none;
    background-color: $bg_color;
    border-style: none;
    border-top-left-radius: $messagedialog_popup_radius;
    border-top-right-radius: $messagedialog_popup_radius;

    @if $style == prime {
      @if $variant == light {
        box-shadow: inset 1px 1px transparentize(white, .2), inset -1px 0 transparentize(black, .9);
      }
      @else {
        box-shadow: inset 1px 1px transparentize(white, .95), inset -1px 0 transparentize(black, .85);
      }
    }

    &:backdrop {
      background-image: none;
    }
  }

  &.csd { // rounded bottom border styling for csd version
    &.background {
      // bigger radius for better antialiasing
      border-bottom-left-radius: $messagedialog_popup_radius;
      border-bottom-right-radius: $messagedialog_popup_radius;

      @if $style == prime {
        @if $variant == light {
          box-shadow: inset 1px 0 transparentize(white, .2), inset -1px -1px transparentize(black, .9);
        }
        @else {
          box-shadow: inset 1px 0 transparentize(white, .95), inset -1px -1px transparentize(black, .85);
        }
      }
    }

    .dialog-action-area {
      margin: 0 10px 10px 10px;

      button {
        padding: 6px 12px; // labels are not vertically centered on message dialog, this is a workaround
      }
    }
  }
  &:not(.csd) {
    .dialog-action-area {
      margin: 0 10px 10px 10px;

      button {
        padding: 6px 12px; // labels are not vertically centered on message dialog, this is a workaround
      }
    }
  }    
}

filechooser {
  .dialog-action-box {
    border-top: 1px solid $borders_color;
  }

  #pathbarbox {
    background-color: $sidebar_bg_color;
    border-bottom: 1px solid transparentize(black, .83);
  }
}

filechooserbutton:drop(active) {
  box-shadow: none;
  border-color: transparent;
}


/***********
 * Sidebar *
 ***********/

.sidebar {
  border-style: none;
  background-color: $sidebar_bg_color;

  @if $gtk == 3.22 {
    @at-root %sidebar_left,
    &:dir(ltr),
    &.left,
    &.left:dir(rtl) {
      border-right: 1px solid $borders_color;
      border-left-style: none;
    }

    @at-root %sidebar_right,
    &:dir(rtl),
    &.right {
      border-left: 1px solid $borders_color;
      border-right-style: none;
    }
  }

  @if $gtk >= 3.24 {
    &:not(separator) {
      @at-root %sidebar_left,
      &:dir(ltr),
      &.left,
      &.left:dir(rtl) {
        border-right: 1px solid $borders_color;
        border-left-style: none;
      }

      @at-root %sidebar_right,
      &:dir(rtl),
      &.right {
        border-left: 1px solid $borders_color;
        border-right-style: none;
      }
    }
  }

  list { background-color: transparent; }

  paned & { &.left, &.right, &.left:dir(rtl), &:dir(rtl), &:dir(ltr), & { border-style: none; } }
}

stacksidebar {
  &.sidebar {
    &:dir(ltr),
    &.left,
    &.left:dir(rtl) { list { @extend %sidebar_left; }}

    &:dir(rtl),
    &.right { list { @extend %sidebar_right; }}
  }

  row {
    padding: 10px 4px;

    > label {
      padding-left: 6px;
      padding-right: 6px;
    }

    &.needs-attention > label {
      @extend %needs_attention;

      background-size: 6px 6px, 0 0;
    }
  }
}

@if $gtk >= 3.24 {
  separator.sidebar {
    background-color: $borders_color;
  }
}

/****************
 * File chooser *
 ****************/
$_placesidebar_icons_opacity: 0.7;

row image.sidebar-icon { opacity: $_placesidebar_icons_opacity; } // dim the sidebar icons
                                                                  // see bug #786613 for details 
                                                                  // on this oddity

placessidebar {
  > viewport.frame { border-style: none; }

  row {
    // Needs overriding of the GtkListBoxRow padding
    margin-left: $placessidebar_side_margin;
    margin-right: $placessidebar_side_margin;
    min-height: $sidebar_row_height;
    padding: $sidebar_row_padding;
    border-radius: 3px;
    -gtk-outline-radius: 3px;

    // Using margins/padding directly in the SidebarRow
    // will make the animation of the new bookmark row jump
    > revealer { padding: 0 14px; }

    &:selected, &.activatable:selected {
      background: if($variant == 'light', transparentize(black, .9), transparentize(white, .94));
      text-shadow: none;
      -gtk-icon-shadow: none;
      color: $fg_color;
//      box-shadow: inset 0 0 0 1px transparentize(black, .85);

      label { color: $selected_fl_color; text-shadow: none; }

      &:hover, &.has-open-popup {
        color: $fg_color;
        background: if($variant == 'light', transparentize(black, .87), transparentize(white, .92));
      }

      &:disabled {
        color: $insensitive_fg_color;
      }
    }

    &:disabled { color: $insensitive_fg_color; }

    image.sidebar-icon {
      &:dir(ltr) { padding-right: 8px; }
      &:dir(rtl) { padding-left: 8px; }
    }

    label.sidebar-label {
      &:dir(ltr) { padding-right: 2px; }
      &:dir(rtl) { padding-left: 2px; }
    }

    @at-root button.sidebar-button {
      @extend %button_basic.flat;

      @extend %button_selected.flat;

      min-height: 26px;
      min-width: 26px;
      margin-top: 3px;
      margin-bottom: 3px;
      padding: 0;
      border-radius: 100%;
      -gtk-outline-radius: 100%;

      &:not(:hover):not(:active) { > image { opacity: $_placesidebar_icons_opacity; } }
    }

    // in the sidebar case it makes no sense to click the selected row
    &:selected:active { box-shadow: none; }

    &.sidebar-placeholder-row {
      padding: 0 8px;
      min-height: 2px;
      background-image: if($variant == 'light', image(desaturate(lighten($drop_target_color, 20%), 20%)), image($drop_target_color));
      background-clip: content-box;
    }

    &.sidebar-new-bookmark-row { color: $link_color; }

    &:drop(active):not(:disabled) {
      color: $drop_target_color;
      box-shadow: none;
//      box-shadow: inset 0 1px $drop_target_color,
//                  inset 0 -1px $drop_target_color;

      &:selected {
        color: $selected_fl_color;
        background-color: if($variant == 'light', desaturate(lighten($drop_target_color, 40%), 40%), desaturate(darken($drop_target_color, 7%), 10%));
      }
    }
  }
}

placesview {
  .server-list-button > image {
    transition: 200ms $ease-out-quad;
    -gtk-icon-transform: rotate(0turn);
  }

  .server-list-button:checked > image {
    transition: 200ms $ease-out-quad;
    -gtk-icon-transform: rotate(-0.5turn);
  }

  row.activatable:hover { background-color: transparent; }

  // this selects the "connect to server" label
  > actionbar > revealer > box > label {
    padding-left: 8px;
    padding-right: 8px;
  }
}


/*********
 * Paned *
 *********/
paned {
  > separator {
    min-width: 1px;
    min-height: 1px;
    -gtk-icon-source: none; // defeats the ugly default handle decoration
    border-style: none; // just to be sure
    background-color: transparent;
    // workaround, using background istead of a border since the border will get rendered twice (?)
    background-image: image($borders_color);
    background-size: 1px 1px;

    &:selected { background-image: image($selected_bl_color); } // FIXME is this needed?

    &.wide {
      min-width: 5px;
      min-height: 5px;
      background-color: $bg_color;
      background-image: image($borders_color), image($borders_color);
      background-size: 1px 1px, 1px 1px;
    }
  }

  &.horizontal > separator {
    background-repeat: repeat-y;

    &:dir(ltr) {
      margin: 0 -8px 0 0;
      padding: 0 8px 0 0;
      background-position: left;
    }
    &:dir(rtl) {
      margin: 0 0 0 -8px;
      padding: 0 0 0 8px;
      background-position: right;
    }

    &.wide {
      margin: 0;
      padding: 0;
      background-repeat: repeat-y, repeat-y;
      background-position: left, right;
    }
  }

  &.vertical > separator {
    margin: 0 0 -8px 0;
    padding: 0 0 8px 0;
    background-repeat: repeat-x;
    background-position: top;

    &.wide {
      margin: 0;
      padding: 0;
      background-repeat: repeat-x, repeat-x;
      background-position: bottom, top;
    }
  }
}


/**************
 * GtkInfoBar *
 **************/
infobar {
  border-style: none;

  @each $bartype, $barcolor in (info, $infobar_color),
                               (question, $questionbar_color),
                               (warning, $warningbar_color),
                               (error, $errorbar_color) {
    &.#{$bartype} {
      & > revealer > box {
        label, & { color: $selected_fl_color; }

        background-color: $barcolor;
        border-bottom: 1px solid;
        border-bottom-color: if($variant == light, darken($barcolor, 15%), darken($barcolor, 10%));
      }

      button {
        @include button(normal, $barcolor, $selected_fl_color);

        border-color: if($variant == light, _border_color(desaturate($barcolor, 10%)), lighten(_border_color(desaturate($barcolor, 10%)), 7%));

        &:hover {
          @include button(hover, $barcolor, $selected_fl_color);

          border-color: if($variant == light, _border_color(desaturate($barcolor, 10%)), lighten(_border_color(desaturate($barcolor, 10%)), 7%));
        }

        &:active,
        &:checked {
          @include button(active, $barcolor, $selected_fl_color);

          border-color: if($variant == light, _border_color(desaturate($barcolor, 10%)), lighten(_border_color(desaturate($barcolor, 10%)), 7%));
        }

        &:disabled {
          @include button(insensitive,$barcolor,$selected_fl_color);

          border-color: if($variant == light, _border_color(desaturate($barcolor, 10%)), lighten(_border_color(desaturate($barcolor, 10%)), 7%));

          label, & { color: if($variant == light, transparentize($selected_fl_color, .6), transparentize($selected_fl_color, .5)); }
        }
      }

      // gedit uses progressbar inside infobar
      progressbar {
        trough {
          background-color: darken($barcolor, 10%);
          border-color: darken($barcolor, 20%);
        }

        progress {
          background-color: lighten($barcolor, 10%);
          border-color: darken($barcolor, 20%);

          @if $style == prime { box-shadow: inset 1px 1px transparentize(white, .9), inset -1px -1px transparentize(darken($barcolor, 20%), .9); }
        }
      }

      selection { background-color: darken($barcolor, 10%); }

      *:link { @extend %link_selected; }
    }
  }
}


/************
 * Tooltips *
 ************/
tooltip {
  &.background {
    // background-color needs to be set this way otherwise it gets drawn twice
    // see https://bugzilla.gnome.org/show_bug.cgi?id=736155 for details.
    background-color: $tooltip_bg_color;
    background-clip: padding-box;
    border: 1px solid $tooltip_borders_color; // this suble border is meant to
                                              // not make the tooltip melt with
                                              // very dark backgrounds

    @if $style == prime {
      @if $variant == light { box-shadow: inset 0 0 0 1px transparentize(white, .4), 1px 1px transparentize(black, .9); }

      @else { box-shadow: inset 0 0 0 1px transparentize(white, .92), 1px 1px transparentize(black, .9); }
    }
    @if $style == flat {
      @if $variant == light { box-shadow: 1px 1px transparentize(black, .9); }

      @else { box-shadow: 1px 1px transparentize(black, .9); }
    }
  }

  padding: $tooltip_padding; /* not working */
  border-radius: 5px;
  box-shadow: none; // otherwise it gets inherited by windowframe.csd
  text-shadow: none;

  &:not(.csd) {
    border-radius: 0;
    // lounge: border colors should be based on tooltip color (transparency doesnt work)
    border-color: if($variant == light, desaturate(darken($tooltip_bg_color, 20%), 20%), darken($tooltip_bg_color, 12%));
  }

  // FIXME: we need a border or tooltips vanish on black background.
  decoration { background-color: transparent; }

  * { // Yeah this is ugly
    padding: $tooltip_padding;
    background-color: transparent;
    color: $tooltip_fg_color;
  }
}


/*****************
 * Color Chooser *
 *****************/
colorswatch {
  // This widget is made of two boxes one on top of the other, the lower box is colorswatch {} the other one
  // is colorswatch overlay {}, colorswatch has the programmatically set background, so most of the style is
  // applied to the overlay box.

  &:drop(active), & { border-style: none; } // FIXME: implement a proper drop(active) state

  $_colorswatch_radius: 5px;

  // base color corners rounding
  // to avoid the artifacts caused by rounded corner anti-aliasing the base color
  // sports a bigger radius.
  // nth-child is needed by the custom color strip.

  &.top {
    border-top-left-radius: $_colorswatch_radius + 0.5px;
    border-top-right-radius: $_colorswatch_radius + 0.5px;

    overlay {
      border-top-left-radius: $_colorswatch_radius;
      border-top-right-radius: $_colorswatch_radius;
    }
  }

  &.bottom {
    border-bottom-left-radius: $_colorswatch_radius + 0.5px;
    border-bottom-right-radius: $_colorswatch_radius + 0.5px;

    overlay {
      border-bottom-left-radius: $_colorswatch_radius;
      border-bottom-right-radius: $_colorswatch_radius;
    }
  }

  &.left,
  &:first-child:not(.top) {
    border-top-left-radius: $_colorswatch_radius + 0.5px;
    border-bottom-left-radius: $_colorswatch_radius + 0.5px;

    overlay {
      border-top-left-radius: $_colorswatch_radius;
      border-bottom-left-radius: $_colorswatch_radius;
    }
  }

  &.right,
  &:last-child:not(.bottom) {
    border-top-right-radius: $_colorswatch_radius + 0.5px;
    border-bottom-right-radius: $_colorswatch_radius + 0.5px;

    overlay {
      border-top-right-radius: $_colorswatch_radius;
      border-bottom-right-radius: $_colorswatch_radius;
    }
  }

  &.dark {
    outline-color: transparentize(white, 0.4);

    overlay {
      color: white;

      &:hover { border-color: if($variant == 'light', transparentize(black, 0.2), $borders_color); }
    }
  }

  &.light {
    outline-color: transparentize(black, 0.4);

    overlay {
      color: black;

      &:hover { border-color: if($variant == 'light', transparentize(black, 0.5), $borders_color); }
    }
  }

  &:drop(active) {
    box-shadow: none;

    &.light overlay {
      border-color: $drop_target_color;
      box-shadow: inset 0 0 0 2px if($variant == 'light', darken($drop_target_color, 7%), $borders_color),
                  inset 0 0 0 1px $drop_target_color;
    }

    &.dark overlay {
      border-color: $drop_target_color;
      box-shadow: inset 0 0 0 2px if($variant == 'light', transparentize(black, 0.7), $borders_color),
                  inset 0 0 0 1px $drop_target_color;
    }
  }

  overlay {
    border: 1px solid if($variant == 'light', transparentize(black, 0.7), $borders_color);

    &:hover {
      box-shadow: inset 0 1px transparentize(white, 0.6),
                  inset 0 -1px transparentize(black, 0.8);
    }
  }

  &#add-color-button {
    border-radius: $_colorswatch_radius $_colorswatch_radius 0 0;

    &:only-child { border-radius: $_colorswatch_radius; }

    overlay {
      @include button(normal);

      &:hover { @include button(hover); }
    }
  }

  &:disabled {
    opacity: 0.5;

    overlay {
      border-color: transparentize(black, 0.4);
      box-shadow: none;
    }
  }

  row:selected & { box-shadow: 0 0 0 2px $selected_fg_color; }

  &#editor-color-sample {
    border-radius: 4px;

    overlay { border-radius: 3.5px; }
  }
}

// colorscale popup
colorchooser .popover.osd { border-radius: 3px; box-shadow: inset 0 1px $osd_borders_color; }

/********
 * Misc *
 ********/
//content view (grid/list)
.content-view {
  background-color: darken($bg_color,7%);

  &:hover { -gtk-icon-effect: highlight; }

  rubberband, .rubberband { @extend rubberband; }
}

.scale-popup {
  .osd & { @extend %osd; }

  .osd & button.flat {  //FIXME: quick hack, redo properly
    border-style: none;
    border-radius: 3px;
  }

  button { // +/- buttons on GtkVolumeButton popup
    &:hover {
      @extend %undecorated_button;
      background-color: transparentize($fg_color,0.9);
      border-radius: 3px;
    }
  }
}


/**********************
 * Window Decorations *
 *********************/
decoration {
  border-radius: $window_top_radius $window_top_radius 0 0;
  // lamefun trick to get rounded borders regardless of CSD use
  border-width: 0px;

  // this needs to be transparent
  // see bug #722563
  $_wm_border: if($variant=='light', transparentize(black, 0.77), transparentize($borders_color, 0.1));
  $_wm_border_backdrop: if($variant=='light', transparentize(black, 0.82), transparentize($borders_color, 0.1));

  box-shadow: 0 3px 5px 0px transparentize(black, 0.5),
              0 0 0 1px $_wm_border; //doing borders with box-shadow

  // FIXME rationalize shadows

  // this is used for the resize cursor area
  margin: 10px;

  &:backdrop {
    // the transparent shadow here is to enforce that the shadow extents don't
    // change when we go to backdrop, to prevent jumping windows.
    // The biggest shadow should be in the same order then in the active state
    // or the jumping will happen during the transition.
    box-shadow: 0 3px 5px 0px transparent,
                0 2px 4px 0px transparentize(black, 0.8),
                0 0 0 1px $_wm_border_backdrop;
    transition: $backdrop_transition;
  }

  .maximized &,
  .fullscreen &,
  .tiled &,
  .tiled-top &,
  .tiled-right &,
  .tiled-bottom &,
  .tiled-left & { border-radius: 0; }

  .tiled &,
  .tiled-top &,
  .tiled-right &,
  .tiled-bottom &,
  .tiled-left & { box-shadow: 0 0 0 1px $_wm_border; }

  .popup & { box-shadow: none; }

  // server-side decorations as used by mutter
  .ssd & { box-shadow: 0 0 0 1px $_wm_border; } //just doing borders, wm draws actual shadows

  .csd.popup & {
    border-radius: 3px;
    box-shadow: 0 1px 2px transparentize(black, 0.8),
                0 0 0 1px transparentize($_wm_border, 0.1);
  }

  tooltip.csd & {
    border-radius: 5px;
    box-shadow: none;
  }

  messagedialog.csd & {
    border-radius: $messagedialog_popup_radius;
    box-shadow: 0 1px 2px transparentize(black, 0.8),
                0 0 0 1px transparentize($_wm_border, 0.1);
  }

  .solid-csd & {
    margin: 0;
    padding: 4px;
    background-color: $borders_color;
    border: solid 1px $borders_color;
    border-radius: 0;
    box-shadow: inset 0 0 0 3px $headerbar_color, inset 0 1px $top_hilight;

    &:backdrop { box-shadow: inset 0 0 0 3px $bg_color, inset 0 1px $top_hilight; }
  }
}

// Window Close button
button.titlebutton {
  @extend %button_basic;

  @extend %button_basic.flat;

  @include _button_text_shadow;

  &:backdrop { -gtk-icon-shadow: none; }
}

// catch all extend :)

%selected_items {
  background-color: $selected_bl_color;

  @at-root %nobg_selected_items_light, & {
    color: $selected_fl_color;

    &:disabled { color: mix($selected_fl_color, $selected_bl_color, 50%); }
  }
}

%selected_items_invert {
  background-color: $selected_bg_color;
  text-shadow: 1px 1px transparentize(black, 0.9);
  -gtk-icon-shadow: 1px 1px transparentize(black, 0.9);

  @at-root %nobg_selected_items, & {
    color: $selected_fg_color;

    &:hover { color: $selected_fg_color; }

    &:disabled {
      color: mix($selected_fg_color, $selected_bg_color, 50%);
      text-shadow: none;
      -gtk-icon-shadow: none;
    }
  }
}

.monospace { font-family: monospace; }


/**********************
 * Touch Copy & Paste *
 *********************/
//touch selection handlebars for the Popover.osd above
cursor-handle {
  background-color: transparent;
  background-image: none;
  box-shadow: none;
  border-style: none;

  $active_state_text_select: if($scale_style == fancy and $variant == light and $tone == tango, '-active-fancy-tango',
                             if($scale_style == fancy and $variant == light and $tone == rumba, '-active-fancy-rumba',
                             if($scale_style == fancy and $variant == light and $tone == salsa, '-active-fancy-salsa',
                             if($scale_style == fancy and $variant == light and $tone == jive, '-active-fancy-jive',
                             '-active')))); 

  @each $s,$as in ('',''),
                  (':hover','-hover'),
                  (':active','#{$active_state_text_select}') { //no need for insensitive and backdrop

    $style_suffix_text_select: if($style == prime, '',
                               if($style == flat and $s == ':active', '',
                              '-flat'));

    &.top#{$s}:dir(ltr), &.bottom#{$s}:dir(rtl) {
      $_url: 'assets/text-select-start#{$as}#{$style_suffix_text_select}#{$size_suffix}#{$asset_suffix}';
      -gtk-icon-source: -gtk-scaled(url('#{$_url}.png'),
                                    url('#{$_url}@2.png'));
      padding-left: 10px;
    }

    &.bottom#{$s}:dir(ltr), &.top#{$s}:dir(rtl) {
      $_url: 'assets/text-select-end#{$as}#{$style_suffix_text_select}#{$size_suffix}#{$asset_suffix}';
      -gtk-icon-source: -gtk-scaled(url('#{$_url}.png'),
                                    url('#{$_url}@2.png'));
      padding-right: 10px;
    }

    &.insertion-cursor#{$s}:dir(ltr), &.insertion-cursor#{$s}:dir(rtl) {
      $_url: 'assets/slider-horz-scale-has-marks-above#{$as}#{$style_suffix_text_select}#{$size_suffix}#{$asset_suffix}';
      -gtk-icon-source: -gtk-scaled(url('#{$_url}.png'),
                                    url('#{$_url}@2.png'));
    }
  }
}

.context-menu { font: initial; } // Decouple the font of context menus from their entry/textview

// shortcut window keys
.keycap {
  min-width: 20px;
  min-height: 25px;
  margin-top: 2px;
  padding-bottom: 3px;
  padding-left: 6px;
  padding-right: 6px;

  color: $fg_color;
  background-color: $base_color;
  border: 1px solid;
  border-color: if($variant == 'light', mix($borders_color, $bg_color, 50%), $borders_color);
  border-radius: 3px;
  box-shadow: inset 0 -1px $borders_color;
  font-size: smaller;
}

:not(decoration):not(window):drop(active):focus,
:not(decoration):not(window):drop(active) { // FIXME needs to be done widget by widget, this wildcard should really die
  border-color: $drop_target_color;
  box-shadow: inset 0 0 0 1px $drop_target_color;
  caret-color: $drop_target_color;
}

stackswitcher button.text-button { min-width: $stackswitcher_textbutton_width; } // FIXME aggregate with buttons

stackswitcher button.circular,
stackswitcher button.text-button.circular { // FIXME aggregate with buttons
  min-width: 32px;
  min-height: 32px;
  padding: 0;
}

/*************
 * App Icons *
 *************/
@if $gtk >= 3.24 {
  /* Outline for low res icons */
  .lowres-icon {
    -gtk-icon-shadow: 1px 0 rgba(0,0,0,0.2),
                      -1px 0 rgba(0,0,0,0.2),
                      0 1px rgba(0,0,0,0.3),
                      0 -1px rgba(0,0,0,0.2);
  }

  /* Drapshadow for large icons */ 
  .icon-dropshadow {
    -gtk-icon-shadow: 0 1px 2px rgba(0,0,0,0.7);
  }
}

/*********
 * Emoji *
 ********/
//this padding needed to compensate negative popover box margins
popover.emoji-picker { padding: 4px; }

popover.emoji-picker entry { margin: 4px; margin-bottom: 6px; }

button.emoji-section {
  border-color: transparent;
  border-width: 3px;
  border-style: none none solid;
  border-radius: 0;

  margin: 2px;
  padding: 3px 0 0;
  min-width: 28px;
  min-height: 28px;

  /* reset props inherited from the button style */
  background: none;
  box-shadow: none;
  text-shadow: none;

  outline-offset: -5px;

  &:hover { border-color: transparentize($fg_color, .7); }
  &:checked { border-color: $selected_bg_color; }

  label {
    padding: 0;

    opacity: 0.55;
  }

  &:hover label { opacity: 0.775; }
  &:checked label { opacity: 1; }
}

%emoji_united {
  font-size: x-large;
  padding: 6px;
  border-radius: 3px;

  :hover {
    background: $selected_bl_color;
    border-radius: 3px;
  }
}

@if $gtk == 3.22 {
  .emoji { @extend %emoji_united; }
}

@if $gtk >= 3.24 {
  popover.emoji-picker .emoji { @extend %emoji_united; }

  popover.emoji-completion arrow {
    border: none;
    background: none;
  }

  popover.emoji-completion contents row box {
    padding: 2px 10px;
  }

  popover.emoji-completion .emoji:hover {
    background: $selected_bl_color;
  }
}
